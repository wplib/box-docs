{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"\u00b6 Is WPLib Box for you? \u00b6 Do you consider yourself a WordPress professional? Do you (help) build WordPress websites for internal or external clients? Are you a plug-and-play WordPress \" Site Builder ?\" Are you an HTML/CSS and/or Javascript Front-end Developer ? Are you a PHP/MySQL Backend Developer ? Or are you any combination of the above? If you answered \"yes\" to any of these questions then WPLib Box was designed for you . \u00b6 In summary, WPLib Box's goal is to be: \"Every WordPress professional's preferred local development solution.\"","title":"Home"},{"location":"index.html#is-wplib-box-for-you","text":"Do you consider yourself a WordPress professional? Do you (help) build WordPress websites for internal or external clients? Are you a plug-and-play WordPress \" Site Builder ?\" Are you an HTML/CSS and/or Javascript Front-end Developer ? Are you a PHP/MySQL Backend Developer ? Or are you any combination of the above?","title":"Is WPLib Box for you?"},{"location":"index.html#if-you-answered-yes-to-any-of-these-questions-then-wplib-box-was-designed-for-you","text":"In summary, WPLib Box's goal is to be: \"Every WordPress professional's preferred local development solution.\"","title":"If you answered \"yes\" to any of these questions &nbsp;&nbsp;&nbsp;then WPLib Box was designed for you."},{"location":"about.html","text":"About WPLib Box \u00b6 What is WPLib Box? \u00b6 In development since 2015, we have designed WPLib Box to be: The Ultimate Local Development Platform for WordPress Professionals WPLib Box leverages both Docker containers and a VirtualBox virtual machine to provide a best-of-breed solution that is both easy-to-use for typical WordPress use-cases but also flexible enough to support practically any software stack required without requiring (almost?) Linux system administration skills. Why choose WPLib Box? \u00b6 \" It should just work \" \u00b6 \"It should just work\" has been one of our mantras from the very first day when our project lead was on a client project hosted on WordPress VIP and it took him 4 days to get the now dead and hopefully forgotten VIP QuickStart installed and running. \" Make WordPress Easy, Make Whatever Easily Possible \" \u00b6 Even though WPlib Box is designed first and formost to make local development for WordPress easy, we have architected WPLib Box to make any software stack you need to use possible. How, you ask? Stacks and Components . Practically everything that runs in WPLib Box is part of one or more stacks, and stack is a collection of components where most components are (Docker) containers , though certainly not all. Read about WPLib's architecture to understand more. Pre-provisioned \u00b6 Most Vagrant boxes for WordPress start with a base Linux and then build the box \"from ground up\" on the developer's computer , installing Nginx or Apache, PHP, MySQL, etc. This time-consuming process often takes a half hour or more and frequently breaks. Examples of this approach are VVV , VCCW , and Trellis . However we pre-provision WPLib Box \u2014 installing Nginx and Apache, many versions of PHP, MySQL and MariaDB, etc. before you ever download it \u2014 so you can vagrant up or vagrant reload --provision in around 30 seconds (after you first download WPLib Box, which usually takes about 5 minutes, but YMMV.) This pre-provisioning we do almost eliminates the chance of our boot-up process breaking, unlike the aforementioned and similar solutions. Easy XDebug \u00b6 When running WPLib Box and editing with either PhpStorm or VS Code (or another IDE/editor that supports XDebug) you typically need to just click the \"Listen\" button for debugging, and then reload your page in your browser. With WPLib Box debugging typically \"just works.\" Compare that with other solutions that require you to configure PHP to work with XDebug. We can promise you, getting it to work can be an awful lot like this A \" Product ,\" not just a Project \u00b6 The WPLib Team does not view our Vagrantfile and related provisioning scripts as our deliverable , ours are just examples of how you can use our Box Image . Instead we treat our Box Image as our product , and we strive to make it bulletproof and feature-rich with a goal that you will be able to get the exact web server stack you need with only configuration \u2014 which anyone can easily do \u2014 instead of with provisioning; which requires lots of time and at least junior Linux sysadmin skills . Products vs. Just Projects? Projects are often temporary teams whose main focus is to deliver on time, under budget, and within scope . And when these things are achieve, the project is considered a success. In the context of a local development solution that often means a limited feature set that meets a contrained use-case, and they done when they meet the needs of their developers. Products , on the other hand have a longer intended lifetime than a projects. They often have a clear vision for what they intend to be and a consistent team design to achieve those goals. Success for products is not measured in meeting milestores but instead on having very happy users that use the product consistently over time. A \" Platform ,\" not just a Product \u00b6 When we decided to expand our vision for WPLib Box we decided that what we wanted was to create a \"Platform\" upon which other developers with devops experience could build, and not just a product whose flavors are only vanillia and chocolate. Platforms vs. Just Products? A simple way to think about \"Platforms\" vs. \"Products\" is by analogy. We all know that WordPress is a successful but would never have achieved the level of success without the hooks required to enable themes and plugins. Certainly far fewer people would have modified WordPress core to meet their needs than the number who have chosen to install themes and plugins developed by others. So, by analogy, a \"Platform\" is like WordPress with hooks compared to just a \"Product\" which is like WordPress without. Thus WPLib Box is like WordPress with hooks and can easily be extended by 3rd party components . As described above WPLib Box wants to make any software stack you need possible. But not only do we want to make it possible, we want to make it easily possible , and that often means providing a simple-to-extend architecture combined with the community leadership and infrastructure needed to support 3rd party components . And while we do not have the simple-to-extend architecture finalized nor the infrastructure required in-place, those are two of our highest priorities to pursue. A Sincere Desire to meet your needs \u00b6 Since our main goal is for WPLib Box to be the first choice of every WordPress Professional we sincerely want to ensure that WPLib Box meets your specific workflow needs. Most alternatives to WPLib Box have a vision for their solution and if it aligns with your needs, great! If not, too bad; those other solutions will not deviate from the vision, no matter what their users would prefer. But while we too have a vision, out vision includes meeting the needs of all WordPress professionals, so achieving our vision mean meeting your needs too. Full Featured, But Not Bloated \u00b6 Developers often fear that WPLib is, or will be \"bloated \" when we tell them we plan to meet the needs of all WordPress professionals, but that could not be further from the truth. Our specific architecture \u2014 a minimal virtual machine with all functionality implemented as optional containers \u2014 ensures WPLib Box will be full-featured, but never bloated. History of WPLib Box \u00b6 WPLib Box was envisioned simply after our project lead reached a breaking point of frustration with the then available alternatives. The Impetus \u00b6 Our project lead had tried to use VVV on and off for months \u2014 all while his then-partner was effuse over VVV \u2014 yet he continued to fall back to using a local install of PHP, Apache and MySQL because of how long VVV took to provision and how often it broke leaving him with unplanned time required to research and solve the issue before he could actually get back to work and start developing again. But it was not until our project lead experienced \" VIP QuickStart \" <sic> that he decided to actually do something about it. He was on a client project hosted on WordPress VIP and it literally took him four (4) days to get the now dead and hopefully forgotten VIP QuickStart installed and running. Also, one of our project lead's motivations was to be able to provide a local development experience \"that just worked\" for newbie WordPress developer who attended the WordPress Developer Meetup he was running at the time. He had tried VVV but typically spent most of the two (2) hour sessions just getting it VVV to work on workshop attendee's computers. Clearly this was not viable! Then our project lead researched alternatives and found ScotchBox which billed itself as a dead-simple LAMP stack for local development. And it was dead simple; and it was pre-provisioned ( like WPLib Box is now ). It was perfect! I could use it for both developing client projects and and for workshops at the WordPress Developer Meetup! Except. ScotchBox lacked/lacks XDebug . Which made it not perfect for a WordPress Developer Meetup workshops because getting XDebug working can be a major PITA . Worse, even though many people were clamoring for it , the developer of ScotchBox said no to adding XDebug as a standard feature. So this third roadblack was the last straw. We decided the only way to get the power and control that we needed, and frankly that all developers need , was to architect and build it ourselves! The First Generation \u00b6 The goals for the first generation of WPLib Box (Nov 2015 through Feb 2017) was to create a stable LEMP box that made using XDebug easy and was as easy to implement as possible and that ideally \"just worked.\" We built it in iterations by focusing on \"the next simplest thing we can add\" which allowed us to deliver on our vision fairly quickly. The final release of this generation was 0.11.2 . The Second Generation \u00b6 The goal for the 2nd generation was to make WPLib Box far more flexible by replacing the internal services with Docker containers thus allowing easy mix-and-match of services. Unfortunately, that was easier said than done. As such versions 0.12.0 , 0.12.1 , 0.13.0 , 0.14.0 , and 0.15.0 were effectively unusable and our offerings during 2017 were abysmal. It was not until we brought on a new team member \u2014 an incredibly skilled Linux sysadmin \u2014 that we were able to get out of these doldrums Following that bleak period we released a usable 0.16.0 in May 2018 quickly followed by 0.16.1 , 0.16.2 and very recently in early July 2018 we released 0.17.0 which is \u2014 by far \u2014 our most usable and workable release ever. What's more we plan a simple bug fix 0.17.1 and a specialty release to support the WordPress Meta Environment , hopefully before the first of August 2018. The Third Generation \u00b6 Which brings us to our (near) future plans; our third generation. At a high level our 3rd generation WPLib Box will: Free itself from the shackles of Vagrant, Have an installer each for Mac and for Windows, and Support multiple projects 1 in a single install of WPLib Box. Beyond that you should checkout out our roadmap where we go into a lot more details. We chose to call future WPLib Box \"Multi-project\" instead of \"Multisite\" to avoid confusion with WordPress Multisite . Thus each WordPress install is a \"project,\" and WPLib Box can support both WordPress Single-site and WordPress Multisite installations. \u21a9","title":"About"},{"location":"about.html#about-wplib-box","text":"","title":"About WPLib Box"},{"location":"about.html#what-is-wplib-box","text":"In development since 2015, we have designed WPLib Box to be: The Ultimate Local Development Platform for WordPress Professionals WPLib Box leverages both Docker containers and a VirtualBox virtual machine to provide a best-of-breed solution that is both easy-to-use for typical WordPress use-cases but also flexible enough to support practically any software stack required without requiring (almost?) Linux system administration skills.","title":"What is WPLib Box?"},{"location":"about.html#why-choose-wplib-box","text":"","title":"Why choose WPLib Box?"},{"location":"about.html#it-should-just-work","text":"\"It should just work\" has been one of our mantras from the very first day when our project lead was on a client project hosted on WordPress VIP and it took him 4 days to get the now dead and hopefully forgotten VIP QuickStart installed and running.","title":"\"It should just work\""},{"location":"about.html#make-wordpress-easy-make-whatever-easily-possible","text":"Even though WPlib Box is designed first and formost to make local development for WordPress easy, we have architected WPLib Box to make any software stack you need to use possible. How, you ask? Stacks and Components . Practically everything that runs in WPLib Box is part of one or more stacks, and stack is a collection of components where most components are (Docker) containers , though certainly not all. Read about WPLib's architecture to understand more.","title":"\"Make WordPress Easy, Make Whatever Easily Possible\""},{"location":"about.html#pre-provisioned","text":"Most Vagrant boxes for WordPress start with a base Linux and then build the box \"from ground up\" on the developer's computer , installing Nginx or Apache, PHP, MySQL, etc. This time-consuming process often takes a half hour or more and frequently breaks. Examples of this approach are VVV , VCCW , and Trellis . However we pre-provision WPLib Box \u2014 installing Nginx and Apache, many versions of PHP, MySQL and MariaDB, etc. before you ever download it \u2014 so you can vagrant up or vagrant reload --provision in around 30 seconds (after you first download WPLib Box, which usually takes about 5 minutes, but YMMV.) This pre-provisioning we do almost eliminates the chance of our boot-up process breaking, unlike the aforementioned and similar solutions.","title":"Pre-provisioned"},{"location":"about.html#easy-xdebug","text":"When running WPLib Box and editing with either PhpStorm or VS Code (or another IDE/editor that supports XDebug) you typically need to just click the \"Listen\" button for debugging, and then reload your page in your browser. With WPLib Box debugging typically \"just works.\" Compare that with other solutions that require you to configure PHP to work with XDebug. We can promise you, getting it to work can be an awful lot like this","title":"Easy XDebug"},{"location":"about.html#a-product-not-just-a-project","text":"The WPLib Team does not view our Vagrantfile and related provisioning scripts as our deliverable , ours are just examples of how you can use our Box Image . Instead we treat our Box Image as our product , and we strive to make it bulletproof and feature-rich with a goal that you will be able to get the exact web server stack you need with only configuration \u2014 which anyone can easily do \u2014 instead of with provisioning; which requires lots of time and at least junior Linux sysadmin skills . Products vs. Just Projects? Projects are often temporary teams whose main focus is to deliver on time, under budget, and within scope . And when these things are achieve, the project is considered a success. In the context of a local development solution that often means a limited feature set that meets a contrained use-case, and they done when they meet the needs of their developers. Products , on the other hand have a longer intended lifetime than a projects. They often have a clear vision for what they intend to be and a consistent team design to achieve those goals. Success for products is not measured in meeting milestores but instead on having very happy users that use the product consistently over time.","title":"A \"Product,\" not just a Project"},{"location":"about.html#a-platform-not-just-a-product","text":"When we decided to expand our vision for WPLib Box we decided that what we wanted was to create a \"Platform\" upon which other developers with devops experience could build, and not just a product whose flavors are only vanillia and chocolate. Platforms vs. Just Products? A simple way to think about \"Platforms\" vs. \"Products\" is by analogy. We all know that WordPress is a successful but would never have achieved the level of success without the hooks required to enable themes and plugins. Certainly far fewer people would have modified WordPress core to meet their needs than the number who have chosen to install themes and plugins developed by others. So, by analogy, a \"Platform\" is like WordPress with hooks compared to just a \"Product\" which is like WordPress without. Thus WPLib Box is like WordPress with hooks and can easily be extended by 3rd party components . As described above WPLib Box wants to make any software stack you need possible. But not only do we want to make it possible, we want to make it easily possible , and that often means providing a simple-to-extend architecture combined with the community leadership and infrastructure needed to support 3rd party components . And while we do not have the simple-to-extend architecture finalized nor the infrastructure required in-place, those are two of our highest priorities to pursue.","title":"A \"Platform,\" not just a Product"},{"location":"about.html#a-sincere-desire-to-meet-your-needs","text":"Since our main goal is for WPLib Box to be the first choice of every WordPress Professional we sincerely want to ensure that WPLib Box meets your specific workflow needs. Most alternatives to WPLib Box have a vision for their solution and if it aligns with your needs, great! If not, too bad; those other solutions will not deviate from the vision, no matter what their users would prefer. But while we too have a vision, out vision includes meeting the needs of all WordPress professionals, so achieving our vision mean meeting your needs too.","title":"A Sincere Desire to meet your needs"},{"location":"about.html#full-featured-but-not-bloated","text":"Developers often fear that WPLib is, or will be \"bloated \" when we tell them we plan to meet the needs of all WordPress professionals, but that could not be further from the truth. Our specific architecture \u2014 a minimal virtual machine with all functionality implemented as optional containers \u2014 ensures WPLib Box will be full-featured, but never bloated.","title":"Full Featured, But Not Bloated"},{"location":"about.html#history-of-wplib-box","text":"WPLib Box was envisioned simply after our project lead reached a breaking point of frustration with the then available alternatives.","title":"History of WPLib Box"},{"location":"about.html#the-impetus","text":"Our project lead had tried to use VVV on and off for months \u2014 all while his then-partner was effuse over VVV \u2014 yet he continued to fall back to using a local install of PHP, Apache and MySQL because of how long VVV took to provision and how often it broke leaving him with unplanned time required to research and solve the issue before he could actually get back to work and start developing again. But it was not until our project lead experienced \" VIP QuickStart \" <sic> that he decided to actually do something about it. He was on a client project hosted on WordPress VIP and it literally took him four (4) days to get the now dead and hopefully forgotten VIP QuickStart installed and running. Also, one of our project lead's motivations was to be able to provide a local development experience \"that just worked\" for newbie WordPress developer who attended the WordPress Developer Meetup he was running at the time. He had tried VVV but typically spent most of the two (2) hour sessions just getting it VVV to work on workshop attendee's computers. Clearly this was not viable! Then our project lead researched alternatives and found ScotchBox which billed itself as a dead-simple LAMP stack for local development. And it was dead simple; and it was pre-provisioned ( like WPLib Box is now ). It was perfect! I could use it for both developing client projects and and for workshops at the WordPress Developer Meetup! Except. ScotchBox lacked/lacks XDebug . Which made it not perfect for a WordPress Developer Meetup workshops because getting XDebug working can be a major PITA . Worse, even though many people were clamoring for it , the developer of ScotchBox said no to adding XDebug as a standard feature. So this third roadblack was the last straw. We decided the only way to get the power and control that we needed, and frankly that all developers need , was to architect and build it ourselves!","title":"The Impetus"},{"location":"about.html#the-first-generation","text":"The goals for the first generation of WPLib Box (Nov 2015 through Feb 2017) was to create a stable LEMP box that made using XDebug easy and was as easy to implement as possible and that ideally \"just worked.\" We built it in iterations by focusing on \"the next simplest thing we can add\" which allowed us to deliver on our vision fairly quickly. The final release of this generation was 0.11.2 .","title":"The First Generation"},{"location":"about.html#the-second-generation","text":"The goal for the 2nd generation was to make WPLib Box far more flexible by replacing the internal services with Docker containers thus allowing easy mix-and-match of services. Unfortunately, that was easier said than done. As such versions 0.12.0 , 0.12.1 , 0.13.0 , 0.14.0 , and 0.15.0 were effectively unusable and our offerings during 2017 were abysmal. It was not until we brought on a new team member \u2014 an incredibly skilled Linux sysadmin \u2014 that we were able to get out of these doldrums Following that bleak period we released a usable 0.16.0 in May 2018 quickly followed by 0.16.1 , 0.16.2 and very recently in early July 2018 we released 0.17.0 which is \u2014 by far \u2014 our most usable and workable release ever. What's more we plan a simple bug fix 0.17.1 and a specialty release to support the WordPress Meta Environment , hopefully before the first of August 2018.","title":"The Second Generation"},{"location":"about.html#the-third-generation","text":"Which brings us to our (near) future plans; our third generation. At a high level our 3rd generation WPLib Box will: Free itself from the shackles of Vagrant, Have an installer each for Mac and for Windows, and Support multiple projects 1 in a single install of WPLib Box. Beyond that you should checkout out our roadmap where we go into a lot more details. We chose to call future WPLib Box \"Multi-project\" instead of \"Multisite\" to avoid confusion with WordPress Multisite . Thus each WordPress install is a \"project,\" and WPLib Box can support both WordPress Single-site and WordPress Multisite installations. \u21a9","title":"The Third Generation"},{"location":"changelog.html","text":"ChangeLog for WPLib Box \u00b6 0.17.0 \u00b6 Another numerically small change but another huge update functionally and stability-wise. Prebuilt PHP component containers for 5.2.4 , 5.6.36 , 7.0.30 , 7.1.18 and 7.2.6 . 5.3.29 , 5.4.45 and 5.5.38 to follow in 0.17.1 . New project.json layout. Merging of official project.json release file with user project.json file. New sub-command box component with simpler command set. Better handling of component stop/start. Cleaner output from box component & box container . Component Makefile s will now log build output. Improved box self-update allowing same version updates. Moved all Packer provisioning scripts to a new sub-command box provision . Several box container bugs squashed. Refactoring of several scripts. Moved many common functions contained in scripts to central file. General stability improvements. 0.16.2 \u00b6 -Catch up on some of the things we missed with 0.16.1 : 0.16.1 \u00b6 This release allowed us to catch up on some of the things we missed with 0.16.0 : PHP 7.2 Import /sql/provision.sql on first vagrant up Added PHP ZLib extension Resolve issues with box self-update command Moved box CLI to /opt/box/cli Added /opt/box/log Changed W004 error message on a PHP error to HTTP 500 error. Dropped support for older WP-CLI versions Added basic box test command to test box functionality 0.16.0 \u00b6 Numerically it was a small change, but functionality and stability-wise is was a HUGE update. Added: New \"Getting Started\" Default Theme Plugin for WPLib Box Support One-click admin login (for local development only) Splash screen on SSH, displays version number. Configuration in $_ENV variables Configuration error messages w/referenced online docs Default containers for stack roles PHP extensions ctype pcntl imagick (5.6 and 7.1 but not yet 7.0) Warning on non-mounted webroot ( /var/www ) New and/or updated CLI Commands! box version box status box container box database box db chunk & box db unchunk box self-update box start/restart Fixed: WP-CLI now works! Invalid permissions for uploads Invalid permissions for core, theme and plugin updates 30 second timeout triggering Bad Gateway Red (error) output by Vagrant on non-errors Inability to login to Adminer Bug related to NodeJS vs. jq Ability to serve HTTPS even w/o certificate Increase upload limit on file uploads to 100MB New/updated Docker containers: Apache2 and Nginx PHP-FPM 5.6, 7.0, 7.1 MySQL and MariaDB Memcached and Redis Adminer and phpMyAdmin MailHog WP-CLI and Composer Internal architecture improvements: Simplified project.json stack format Moved box CLI to /opt/box and added symlink of /box . Implemented JSON-based tag for container metadata Archived unused and/or no longer relevant box commands 0.15.0 \u00b6 Implement installable pacakages Add Caddy Web Server as installable package Add Nginx proxy Add PHP-DOM extension Add box restart command Update to Adminer 4.3.1 0.14.0 \u00b6 vagrant up now configures box using project.json file Add Memcached as an option Add CLI commands to switch between Redis and Memcached Implement PHP5.6 and PHP7.0 as Docker containers Add shortcut command to switch to PHP7.1 Fix bug in Nginx MailHog virtual host configuration Fix issue where jq was not latest version Add realpath package 0.13.0 \u00b6 Implement MySQL as a Docker container Implement Redis as a Docker container Add MariaDB as an option Fix broken command to switch PHP versions in box Increase Nginx client_max_body_size to 100M Increase Nginx fast_cgi_read_timout to 9999 Add command to switch between MySQL and MariaDB Add shortcut commands for switching out web servers. Update Adminer to 4.3.0 Updated FAQ Update README with current software version numbers 0.12.1 \u00b6 Fixed issue with Docker webserver container starting before Vagrant mounts shared directories Updated FAQ with instructions for accessing Adminer Updated to WordPress 4.7.3 as default Updated database with new WP 4.7.3 structure Updated Query Monitor plugin to 2.13.4 0.12.0 \u00b6 Implement Apache and Nginx as Docker containers Add CLI command set-web-server to switch between Apache and Nginx Change message that appears on default web page Clone box scripts into box during build 0.11.0 \u00b6 Fix incorrect installation of screen and jq Remove HHVM , gearman , and ZeroMQ 0.10.10 \u00b6 Add screen Add jq Enable Adminer and Mailhog to respond to box hostname Default site now uses PHP7.0 Upgrade MySQL Server to 5.6 Add ZeroMQ 0.10.9 \u00b6 Add HHVM Add bcmath and pspell PHP extensions Add php-dev and php5.6-dev packages Add MySQL configuration for vagrant user 0.10.8 \u00b6 Add PHP gettext , imagick , mcrypt , xml , and zip extensions Add Composer 0.10.7.3 \u00b6 Added Nginx proxy for Mailhog Added PHP mbstring extension Increased Nginx client_max_body_size to 100M 0.10.7.2 \u00b6 Fixed Xdebug configuration for PHP 5.6 Added Xdebug configuration for remote debugging with Visual Studio Code 0.10.7.1 \u00b6 Fixed issue with xDebug configuration Fixed issue with certain PHP modules not loading in PHP 5.6 Added PHP-Memcached extension Fixed regression issue with nginx sendfile property being set to 'on' Fixed issue with being unable to connect to MySQL server from host Add Adminer 0.10.7 \u00b6 Added PHP 5.6 and 7.0 Added Gearman Job Server with PHP support Added automatic hourly database export 0.10.6.2 \u00b6 Add default web page Fix VMWare tools Installation 0.10.6.1 \u00b6 Added server name in virtual host configuration to support Xdebug Increased nginx timeout to 99999 seconds 0.10.6 \u00b6 Fixed missing wp-cli Added SSL 0.10.5 \u00b6 Changed nginx website root to /var/www . Upon vagrant ssh current directory is changed to website root. Increased upload_max_size to 100M. Set nginx \"sendfile\" option to off Added Support for PHP GD (php5-gd) See http://php.net/manual/en/book.image.php 0.10.4 and before \u00b6 We did not keep a change log before 0.10.5 .","title":"ChangeLog"},{"location":"changelog.html#changelog-for-wplib-box","text":"","title":"ChangeLog for WPLib Box"},{"location":"changelog.html#0170","text":"Another numerically small change but another huge update functionally and stability-wise. Prebuilt PHP component containers for 5.2.4 , 5.6.36 , 7.0.30 , 7.1.18 and 7.2.6 . 5.3.29 , 5.4.45 and 5.5.38 to follow in 0.17.1 . New project.json layout. Merging of official project.json release file with user project.json file. New sub-command box component with simpler command set. Better handling of component stop/start. Cleaner output from box component & box container . Component Makefile s will now log build output. Improved box self-update allowing same version updates. Moved all Packer provisioning scripts to a new sub-command box provision . Several box container bugs squashed. Refactoring of several scripts. Moved many common functions contained in scripts to central file. General stability improvements.","title":"0.17.0"},{"location":"changelog.html#0162","text":"-Catch up on some of the things we missed with 0.16.1 :","title":"0.16.2"},{"location":"changelog.html#0161","text":"This release allowed us to catch up on some of the things we missed with 0.16.0 : PHP 7.2 Import /sql/provision.sql on first vagrant up Added PHP ZLib extension Resolve issues with box self-update command Moved box CLI to /opt/box/cli Added /opt/box/log Changed W004 error message on a PHP error to HTTP 500 error. Dropped support for older WP-CLI versions Added basic box test command to test box functionality","title":"0.16.1"},{"location":"changelog.html#0160","text":"Numerically it was a small change, but functionality and stability-wise is was a HUGE update. Added: New \"Getting Started\" Default Theme Plugin for WPLib Box Support One-click admin login (for local development only) Splash screen on SSH, displays version number. Configuration in $_ENV variables Configuration error messages w/referenced online docs Default containers for stack roles PHP extensions ctype pcntl imagick (5.6 and 7.1 but not yet 7.0) Warning on non-mounted webroot ( /var/www ) New and/or updated CLI Commands! box version box status box container box database box db chunk & box db unchunk box self-update box start/restart Fixed: WP-CLI now works! Invalid permissions for uploads Invalid permissions for core, theme and plugin updates 30 second timeout triggering Bad Gateway Red (error) output by Vagrant on non-errors Inability to login to Adminer Bug related to NodeJS vs. jq Ability to serve HTTPS even w/o certificate Increase upload limit on file uploads to 100MB New/updated Docker containers: Apache2 and Nginx PHP-FPM 5.6, 7.0, 7.1 MySQL and MariaDB Memcached and Redis Adminer and phpMyAdmin MailHog WP-CLI and Composer Internal architecture improvements: Simplified project.json stack format Moved box CLI to /opt/box and added symlink of /box . Implemented JSON-based tag for container metadata Archived unused and/or no longer relevant box commands","title":"0.16.0"},{"location":"changelog.html#0150","text":"Implement installable pacakages Add Caddy Web Server as installable package Add Nginx proxy Add PHP-DOM extension Add box restart command Update to Adminer 4.3.1","title":"0.15.0"},{"location":"changelog.html#0140","text":"vagrant up now configures box using project.json file Add Memcached as an option Add CLI commands to switch between Redis and Memcached Implement PHP5.6 and PHP7.0 as Docker containers Add shortcut command to switch to PHP7.1 Fix bug in Nginx MailHog virtual host configuration Fix issue where jq was not latest version Add realpath package","title":"0.14.0"},{"location":"changelog.html#0130","text":"Implement MySQL as a Docker container Implement Redis as a Docker container Add MariaDB as an option Fix broken command to switch PHP versions in box Increase Nginx client_max_body_size to 100M Increase Nginx fast_cgi_read_timout to 9999 Add command to switch between MySQL and MariaDB Add shortcut commands for switching out web servers. Update Adminer to 4.3.0 Updated FAQ Update README with current software version numbers","title":"0.13.0"},{"location":"changelog.html#0121","text":"Fixed issue with Docker webserver container starting before Vagrant mounts shared directories Updated FAQ with instructions for accessing Adminer Updated to WordPress 4.7.3 as default Updated database with new WP 4.7.3 structure Updated Query Monitor plugin to 2.13.4","title":"0.12.1"},{"location":"changelog.html#0120","text":"Implement Apache and Nginx as Docker containers Add CLI command set-web-server to switch between Apache and Nginx Change message that appears on default web page Clone box scripts into box during build","title":"0.12.0"},{"location":"changelog.html#0110","text":"Fix incorrect installation of screen and jq Remove HHVM , gearman , and ZeroMQ","title":"0.11.0"},{"location":"changelog.html#01010","text":"Add screen Add jq Enable Adminer and Mailhog to respond to box hostname Default site now uses PHP7.0 Upgrade MySQL Server to 5.6 Add ZeroMQ","title":"0.10.10"},{"location":"changelog.html#0109","text":"Add HHVM Add bcmath and pspell PHP extensions Add php-dev and php5.6-dev packages Add MySQL configuration for vagrant user","title":"0.10.9"},{"location":"changelog.html#0108","text":"Add PHP gettext , imagick , mcrypt , xml , and zip extensions Add Composer","title":"0.10.8"},{"location":"changelog.html#01073","text":"Added Nginx proxy for Mailhog Added PHP mbstring extension Increased Nginx client_max_body_size to 100M","title":"0.10.7.3"},{"location":"changelog.html#01072","text":"Fixed Xdebug configuration for PHP 5.6 Added Xdebug configuration for remote debugging with Visual Studio Code","title":"0.10.7.2"},{"location":"changelog.html#01071","text":"Fixed issue with xDebug configuration Fixed issue with certain PHP modules not loading in PHP 5.6 Added PHP-Memcached extension Fixed regression issue with nginx sendfile property being set to 'on' Fixed issue with being unable to connect to MySQL server from host Add Adminer","title":"0.10.7.1"},{"location":"changelog.html#0107","text":"Added PHP 5.6 and 7.0 Added Gearman Job Server with PHP support Added automatic hourly database export","title":"0.10.7"},{"location":"changelog.html#01062","text":"Add default web page Fix VMWare tools Installation","title":"0.10.6.2"},{"location":"changelog.html#01061","text":"Added server name in virtual host configuration to support Xdebug Increased nginx timeout to 99999 seconds","title":"0.10.6.1"},{"location":"changelog.html#0106","text":"Fixed missing wp-cli Added SSL","title":"0.10.6"},{"location":"changelog.html#0105","text":"Changed nginx website root to /var/www . Upon vagrant ssh current directory is changed to website root. Increased upload_max_size to 100M. Set nginx \"sendfile\" option to off Added Support for PHP GD (php5-gd) See http://php.net/manual/en/book.image.php","title":"0.10.5"},{"location":"changelog.html#0104-and-before","text":"We did not keep a change log before 0.10.5 .","title":"0.10.4 and before"},{"location":"faq.html","text":"OLDER CONTENT; NOT YET EDITED \u00b6 How do I Deploy My Site from WPLib Box? \u00b6 Deployment to a production or staging server is extremely simple. Just: Copy the entire contents of the www/ directory to the website root of the server where you are hosting your site. Using a SQL client tool such as Sequel Pro or Navicat export aka \"dump\" your database to a .sql file. Import your .sql file into your web host's MySQL or MariaDB server which may be referred to as \"executing\" your SQL file. Modify www/wp-config-local.php on your web host to use your web host's database credentials and any other configuration options that differ on your production or staging server. In future deployments be sure not to overwrite your web host specific www/wp-config-local.php file. And except for the following NOTE, that is it. NOTE: You will need to run whatever process you normally run to change the URLs from your local URLs to your production or staging URLs. There are many solutions to this although not one ideal solution thus explaining how to do this is out of the scope of this FAQ. But let us google it for you . How do I Use WPLib Box on New Projects? \u00b6 To use WPLib Box on new projects just copy the Vagrantfile and the scripts/ directory from this repository to your new project and change the domain name to the local domain name for your project. The only \u201dconstraint\u201d (that we are currently aware of) is you will need to have your website root in a www/ directory that is a sibling to Vagrantfile and to scripts/ but otherwise it should all just work using vagrant up . NOTE: : You do not have to organize the WordPress directory structures like we have with /www/content and /www/wp ; you can easily use the standard directory layout used by WordPress core e.g. www/wp-content/ and www/ , respectively. How do I Use WPLib Box on Pre-Existing Projects? \u00b6 To use for an existing project, you follow the same instructions as for new projects; copy the Vagrantfile and the scripts/ directory from this repository to your new project, change the domain name to the local domain name for your project and move your website root into a www/ directory that is a sibling to Vagrantfile and to scripts/ and then vagrant up . If you cannot put your code into a www/ subdirectory for some reason you can put the Vagrantfile in your web root and change the line that starts with config.vm.synced_folder to be: config.vm.synced_folder \".\", \"/var/www\" If you cannot create a scripts/ directory in the same directory as your Vagrantfile you can name that directory something else \u2014 such as wplib-scripts/ \u2014 and then search for scripts/ in your Vagrantfile and replace it with whatever you named your directory, e.g. with wplib-scripts/ as in our example. How do I Configure Composer to Work with WPLib Box? \u00b6 Configure composer.json however you like; WPLib Box is agnostic with respect to Composer. Yes, we do include a composer.json with our WPLib Box repository but only so that WPLib Box will just work, out-of-the-box (yeah, sorry for the pun!) How do I Import a MySQL Database? \u00b6 When the box is created, a default WordPress database is installed. If you need to import a different dataset or restore a backup of the data, you can simply vagrant ssh into the guest and perform a MySQL import. To do this, first copy your MySQL database dump to a /sql sub directory in your project directory (your Vagrantfile is in your project directory.) Assuming you called your database dump my-db.sql then run the following commands in your host computer's command line/terminal window when in your project directory: cd /your/project/directory vagrant ssh box import-db my-db.sql Be sure to backup your database BEFORE you run the import-db command. How do I backup the MySQL database in the box? \u00b6 If you have a live database inside of WPLib Box you may want to backup the database to the /sql/ directory in your project root. You can do that like so: cd /your/project/directory vagrant ssh box backup-db The above commands will backup your database to /your/project/directory/sql/current.sql . If there already was a current.sql it will be renmed to previous1.sql and 1 will be incremented each time there is a new backup. Which PHP Versions are Available? \u00b6 Currently, the box has PHP 5.6 , PHP 7.0 and PHP 7.1 , with PHP 7.0 running by default. Versions 5.6 and 7.0 are each implemented using their own Docker container and the latter is installed directly into Ubunutu in our box. All modules installed are configured for both versions of PHP. How do I Switch PHP Versions? \u00b6 The PHP version in use by the site is set in the project.json file in the services section and the processvm property. This will set both the web version and the command line version. To change both web and command line versions to PHP 7.1 , SSH into the running Vagrant box from your project directory and then run the box php7.1 command: cd /your/project/directory vagrant ssh box php7.1 To change to 7.0 or 5.6 , use the same command but replace 7.1 with 7.0 or 5.6 from while SSHed into the box, e.g.: box php7.0 or box php5.6 How do I Install PhpMyAdmin? \u00b6 We decided not to include phpMyAdmin in the core box image because it installs files for Apache that we don't need so we decided to make it optional. To install phpMyAdmin look for the instructions here . How do I Get a URL to Provide Access to My Box's Site From the Internet? \u00b6 The WPLib Box image has localtunnel.me pre-installed in the box. Simply run these commands from your host's command line: vagrant ssh lt --port 80 This will provide you with a URL to share the local site until you exit the command by either terminating the program or shutting down the machine. You can also use Vagrant Share . How do I debug with Visual Studio Code? \u00b6 The configuration file for Visual Studio Code is already included in the respository. Ensure that you have installed the PHP Debug extension for Visual Studio Code. How do I access Adminer? \u00b6 Adminer is a web front end to administer the MySQL server. End users can access Adminer at http://adminer.{your-domain}. If you have not changed the box domain name, that would be http://adminer.wplib.box . The credentials are: Host: 172.42.0.1 Username: wordpress Password: wordpress database: wordpress How do I access MailHog? \u00b6 MailHog is an email testing tool for development purposes. In WPLib Box, all outgoing emails are captured and available for inspection via the MailHog interface: http://mailhog.wplib.box . If you have changed the box domain, you can use http://mailhog.{your-domain}. How do I fix the Vagrant 1.8.6 Bug? \u00b6 Vagrant 1.8.6 appears to have an issue with auto-configuring its network. Until this is fixed by Vagrant there is a workaround which requires you to SSH into the box after vagrant up . It is not difficult \u2014 the instructions appear longer than the task itself \u2014 just follow these steps: Once your box is running (after a vagrant up ) run vagrant ssh . Once \"inside\" WPLib Box type sudo nano /etc/network/interfaces to load the network config into the Nano editor. Look for the second (2nd) occurence of auth eth0 and change it to auth eth1 . Also change the eth0 in the next line ( iface eth0 inet static ) to be eth1 . The result should be iface eth1 inet static . Delete both lines that begin with #VAGRANT- by moving your cursor to those lines and pressing Ctrl-K once for each line. Save the file by pressing Ctrl-O then pressing [Enter] . Exit the editor with Ctrl-X . Exit \"inside\" WPLib Box (the SSH session) by typing the exit command. If you somehow mess up while editing you can exit Nano and start over by pressing Ctrl-X then pressing N (for \"No\") when it asks you if you want to \"Save the buffer?\" . In addition you need to make a simple change to Vagrantfile using whatever editor you normally use to edit code. Find the following line in Vagrantfile around line 264 : config.vm.network 'private_network', ip: IO.read('IP').strip And add , auto_config: false to the end, like so: config.vm.network 'private_network', ip: IO.read('IP').strip, auto_config: false Then run vagrant reload . This should fix it. Also you should not need to revert that after upgrading to a new version of Vagrant unless you need to change the box's IP address . How do I switch from Nginx to Apache (or vice versa)? \u00b6 By default, WPLib Box uses Nginx as its webserver. However, Apache is available and can be switched out with Nginx. The box CLI has a command, set-web-server to accomplish this. For example, to switch from Nginx to Apache: Log in to the box using vagrant ssh on your host machine. Enter the following command: box apache to make Apache the running webserver. Conversely, you can box nginx to switch from Apache to Nginx. How do I switch from MySQL to MariaDB (or vice versa)? \u00b6 The box runs MySQL as the default database, however MariaDB is available. To configure the box to use MariaDB instead, use the box command (which will dump the contents of the current database and import into the new database) : Log in to the box using vagrant ssh on your host machine. Enter the following command: box mariadb to use MariaDB. Conversely, you can box mysql to switch from MariaDB to MySQL. How do I see the logs for Docker container Foo? \u00b6 The logs for a Docker container can be viewed using the command docker logs foo , where foo is the name of the container whose logs you wish to view. To get a list of containers you can run the following command: docker container ls To see just the names run this command: docker container ls --format '{{.Names}}' At the time of this writing the container names in WPLib Box were (though not all run all the time): mailhog mariadb mysql memcached redis php5_fpm php7_fpm apache nginx proxy In the case of the webserver containers, these logs contain both the access and error log entries. If you get 404 Not Found on Vagrant Up \u00b6 If you get a 404 error from vagrant up chances are you are on a 1.x version of Vagrant and need to upgrade to a 2.x version. The 1.x version does not recognize the new Vagrant Cloud and still looks to atlas.hashicorp.com for our Vagrant image, which is obviously no longer there (not sure why Hashicorp does not support redirects here, but maybe Vagrant 1.x deoes not follow them?) Upgrading Vagrant to 2.x then running vagrant plugin repair should resolve this issue. Here is what this error looks like on the command line: $ vagrant up Bringing machine 'default' up with 'virtualbox' provider... ==> default: Box 'wplib/wplib' could not be found. Attempting to find and install... default: Box Provider: virtualbox default: Box Version: 0.16.0 The box 'wplib/wplib' could not be found or could not be accessed in the remote catalog. If this is a private box on HashiCorp's Atlas, please verify you're logged in via `vagrant login`. Also, please double-check the name. The expanded URL and error message are shown below: URL: [\"https://atlas.hashicorp.com/wplib/wplib\"] Error: The requested URL returned error: 404 Not Found Development Approach \u00b6 (These principles apply to our process prior to when we reach version 1.0.) Frequent Releases \u00b6 Our development approach is to create frequent 0.x releases as we work towards version 1.0 . Currently we plan a new release approximately once every three (3) weeks, although the distance between some releases may take longer as our client obligations override our ability to stay on deadline. The Smallest Next Thing \u00b6 For each of these releases we ask ourselves what is the smallest thing we can do that will have a meaningful positive impact on either our existing users or new prospective users. And then we schedule it as a milestone and start working. Flexible Priorities \u00b6 Currently it is hard for us to look past the next milestone in specifics, as we are very aware of and interested in feedback from users; we'd rather be able to react to feedback when possible than put it off until after a really long time later. Move Fast, Resolve Issues Quickly \u00b6 Also, given WPLIb Box is pre-1.0 and we are moving fast, we may break things and/or implement a new feature where we have not thought through all the use-cases, but we'll move quickly to resolve any issues our fast moving creates and hopefully offer workarounds via Slack or GitHub issues in the mean time. For example, we recently implemented Nginx as a Docker container but did not provide user access to update the Nginx config files (but we plan to correct that the next release.) Until Version 1.0 \u00b6 However, as we get closer and closer to 1.0 we'll be breaking things less and less and we'll be implemented fewer new features that are not fully baked upon release. It's basically our agile process of working towards a 1.0 release. Business \u00b6 What is our Business Model? \u00b6 We are a consulting company that is transitioning to a product company that offers products and services for improving Developer Experience for PHP developers who have chosen to use WordPress as a platform. If you have idea ahout how we could help your development organization with workflow please contact us with your ideas and we'll see if we can help.","title":"FAQ"},{"location":"faq.html#older-content-not-yet-edited","text":"","title":"OLDER CONTENT; NOT YET EDITED"},{"location":"faq.html#how-do-i-deploy-my-site-from-wplib-box","text":"Deployment to a production or staging server is extremely simple. Just: Copy the entire contents of the www/ directory to the website root of the server where you are hosting your site. Using a SQL client tool such as Sequel Pro or Navicat export aka \"dump\" your database to a .sql file. Import your .sql file into your web host's MySQL or MariaDB server which may be referred to as \"executing\" your SQL file. Modify www/wp-config-local.php on your web host to use your web host's database credentials and any other configuration options that differ on your production or staging server. In future deployments be sure not to overwrite your web host specific www/wp-config-local.php file. And except for the following NOTE, that is it. NOTE: You will need to run whatever process you normally run to change the URLs from your local URLs to your production or staging URLs. There are many solutions to this although not one ideal solution thus explaining how to do this is out of the scope of this FAQ. But let us google it for you .","title":"How do I Deploy My Site from WPLib Box?"},{"location":"faq.html#how-do-i-use-wplib-box-on-new-projects","text":"To use WPLib Box on new projects just copy the Vagrantfile and the scripts/ directory from this repository to your new project and change the domain name to the local domain name for your project. The only \u201dconstraint\u201d (that we are currently aware of) is you will need to have your website root in a www/ directory that is a sibling to Vagrantfile and to scripts/ but otherwise it should all just work using vagrant up . NOTE: : You do not have to organize the WordPress directory structures like we have with /www/content and /www/wp ; you can easily use the standard directory layout used by WordPress core e.g. www/wp-content/ and www/ , respectively.","title":"How do I Use WPLib Box on New Projects?"},{"location":"faq.html#how-do-i-use-wplib-box-on-pre-existing-projects","text":"To use for an existing project, you follow the same instructions as for new projects; copy the Vagrantfile and the scripts/ directory from this repository to your new project, change the domain name to the local domain name for your project and move your website root into a www/ directory that is a sibling to Vagrantfile and to scripts/ and then vagrant up . If you cannot put your code into a www/ subdirectory for some reason you can put the Vagrantfile in your web root and change the line that starts with config.vm.synced_folder to be: config.vm.synced_folder \".\", \"/var/www\" If you cannot create a scripts/ directory in the same directory as your Vagrantfile you can name that directory something else \u2014 such as wplib-scripts/ \u2014 and then search for scripts/ in your Vagrantfile and replace it with whatever you named your directory, e.g. with wplib-scripts/ as in our example.","title":"How do I Use WPLib Box on Pre-Existing Projects?"},{"location":"faq.html#how-do-i-configure-composer-to-work-with-wplib-box","text":"Configure composer.json however you like; WPLib Box is agnostic with respect to Composer. Yes, we do include a composer.json with our WPLib Box repository but only so that WPLib Box will just work, out-of-the-box (yeah, sorry for the pun!)","title":"How do I Configure Composer to Work with WPLib Box?"},{"location":"faq.html#how-do-i-import-a-mysql-database","text":"When the box is created, a default WordPress database is installed. If you need to import a different dataset or restore a backup of the data, you can simply vagrant ssh into the guest and perform a MySQL import. To do this, first copy your MySQL database dump to a /sql sub directory in your project directory (your Vagrantfile is in your project directory.) Assuming you called your database dump my-db.sql then run the following commands in your host computer's command line/terminal window when in your project directory: cd /your/project/directory vagrant ssh box import-db my-db.sql Be sure to backup your database BEFORE you run the import-db command.","title":"How do I Import a MySQL Database?"},{"location":"faq.html#how-do-i-backup-the-mysql-database-in-the-box","text":"If you have a live database inside of WPLib Box you may want to backup the database to the /sql/ directory in your project root. You can do that like so: cd /your/project/directory vagrant ssh box backup-db The above commands will backup your database to /your/project/directory/sql/current.sql . If there already was a current.sql it will be renmed to previous1.sql and 1 will be incremented each time there is a new backup.","title":"How do I backup the MySQL database in the box?"},{"location":"faq.html#which-php-versions-are-available","text":"Currently, the box has PHP 5.6 , PHP 7.0 and PHP 7.1 , with PHP 7.0 running by default. Versions 5.6 and 7.0 are each implemented using their own Docker container and the latter is installed directly into Ubunutu in our box. All modules installed are configured for both versions of PHP.","title":"Which PHP Versions are Available?"},{"location":"faq.html#how-do-i-switch-php-versions","text":"The PHP version in use by the site is set in the project.json file in the services section and the processvm property. This will set both the web version and the command line version. To change both web and command line versions to PHP 7.1 , SSH into the running Vagrant box from your project directory and then run the box php7.1 command: cd /your/project/directory vagrant ssh box php7.1 To change to 7.0 or 5.6 , use the same command but replace 7.1 with 7.0 or 5.6 from while SSHed into the box, e.g.: box php7.0 or box php5.6","title":"How do I Switch PHP Versions?"},{"location":"faq.html#how-do-i-install-phpmyadmin","text":"We decided not to include phpMyAdmin in the core box image because it installs files for Apache that we don't need so we decided to make it optional. To install phpMyAdmin look for the instructions here .","title":"How do I Install PhpMyAdmin?"},{"location":"faq.html#how-do-i-get-a-url-to-provide-access-to-my-boxs-site-from-the-internet","text":"The WPLib Box image has localtunnel.me pre-installed in the box. Simply run these commands from your host's command line: vagrant ssh lt --port 80 This will provide you with a URL to share the local site until you exit the command by either terminating the program or shutting down the machine. You can also use Vagrant Share .","title":"How do I Get a URL to Provide Access to My Box's Site From the Internet?"},{"location":"faq.html#how-do-i-debug-with-visual-studio-code","text":"The configuration file for Visual Studio Code is already included in the respository. Ensure that you have installed the PHP Debug extension for Visual Studio Code.","title":"How do I debug with Visual Studio Code?"},{"location":"faq.html#how-do-i-access-adminer","text":"Adminer is a web front end to administer the MySQL server. End users can access Adminer at http://adminer.{your-domain}. If you have not changed the box domain name, that would be http://adminer.wplib.box . The credentials are: Host: 172.42.0.1 Username: wordpress Password: wordpress database: wordpress","title":"How do I access Adminer?"},{"location":"faq.html#how-do-i-access-mailhog","text":"MailHog is an email testing tool for development purposes. In WPLib Box, all outgoing emails are captured and available for inspection via the MailHog interface: http://mailhog.wplib.box . If you have changed the box domain, you can use http://mailhog.{your-domain}.","title":"How do I access MailHog?"},{"location":"faq.html#how-do-i-fix-the-vagrant-186-bug","text":"Vagrant 1.8.6 appears to have an issue with auto-configuring its network. Until this is fixed by Vagrant there is a workaround which requires you to SSH into the box after vagrant up . It is not difficult \u2014 the instructions appear longer than the task itself \u2014 just follow these steps: Once your box is running (after a vagrant up ) run vagrant ssh . Once \"inside\" WPLib Box type sudo nano /etc/network/interfaces to load the network config into the Nano editor. Look for the second (2nd) occurence of auth eth0 and change it to auth eth1 . Also change the eth0 in the next line ( iface eth0 inet static ) to be eth1 . The result should be iface eth1 inet static . Delete both lines that begin with #VAGRANT- by moving your cursor to those lines and pressing Ctrl-K once for each line. Save the file by pressing Ctrl-O then pressing [Enter] . Exit the editor with Ctrl-X . Exit \"inside\" WPLib Box (the SSH session) by typing the exit command. If you somehow mess up while editing you can exit Nano and start over by pressing Ctrl-X then pressing N (for \"No\") when it asks you if you want to \"Save the buffer?\" . In addition you need to make a simple change to Vagrantfile using whatever editor you normally use to edit code. Find the following line in Vagrantfile around line 264 : config.vm.network 'private_network', ip: IO.read('IP').strip And add , auto_config: false to the end, like so: config.vm.network 'private_network', ip: IO.read('IP').strip, auto_config: false Then run vagrant reload . This should fix it. Also you should not need to revert that after upgrading to a new version of Vagrant unless you need to change the box's IP address .","title":"How do I fix the Vagrant 1.8.6 Bug?"},{"location":"faq.html#how-do-i-switch-from-nginx-to-apache-or-vice-versa","text":"By default, WPLib Box uses Nginx as its webserver. However, Apache is available and can be switched out with Nginx. The box CLI has a command, set-web-server to accomplish this. For example, to switch from Nginx to Apache: Log in to the box using vagrant ssh on your host machine. Enter the following command: box apache to make Apache the running webserver. Conversely, you can box nginx to switch from Apache to Nginx.","title":"How do I switch from Nginx to Apache (or vice versa)?"},{"location":"faq.html#how-do-i-switch-from-mysql-to-mariadb-or-vice-versa","text":"The box runs MySQL as the default database, however MariaDB is available. To configure the box to use MariaDB instead, use the box command (which will dump the contents of the current database and import into the new database) : Log in to the box using vagrant ssh on your host machine. Enter the following command: box mariadb to use MariaDB. Conversely, you can box mysql to switch from MariaDB to MySQL.","title":"How do I switch from MySQL to MariaDB (or vice versa)?"},{"location":"faq.html#how-do-i-see-the-logs-for-docker-container-foo","text":"The logs for a Docker container can be viewed using the command docker logs foo , where foo is the name of the container whose logs you wish to view. To get a list of containers you can run the following command: docker container ls To see just the names run this command: docker container ls --format '{{.Names}}' At the time of this writing the container names in WPLib Box were (though not all run all the time): mailhog mariadb mysql memcached redis php5_fpm php7_fpm apache nginx proxy In the case of the webserver containers, these logs contain both the access and error log entries.","title":"How do I see the logs for Docker container Foo?"},{"location":"faq.html#if-you-get-404-not-found-on-vagrant-up","text":"If you get a 404 error from vagrant up chances are you are on a 1.x version of Vagrant and need to upgrade to a 2.x version. The 1.x version does not recognize the new Vagrant Cloud and still looks to atlas.hashicorp.com for our Vagrant image, which is obviously no longer there (not sure why Hashicorp does not support redirects here, but maybe Vagrant 1.x deoes not follow them?) Upgrading Vagrant to 2.x then running vagrant plugin repair should resolve this issue. Here is what this error looks like on the command line: $ vagrant up Bringing machine 'default' up with 'virtualbox' provider... ==> default: Box 'wplib/wplib' could not be found. Attempting to find and install... default: Box Provider: virtualbox default: Box Version: 0.16.0 The box 'wplib/wplib' could not be found or could not be accessed in the remote catalog. If this is a private box on HashiCorp's Atlas, please verify you're logged in via `vagrant login`. Also, please double-check the name. The expanded URL and error message are shown below: URL: [\"https://atlas.hashicorp.com/wplib/wplib\"] Error: The requested URL returned error: 404 Not Found","title":"If you get 404 Not Found on Vagrant Up"},{"location":"faq.html#development-approach","text":"(These principles apply to our process prior to when we reach version 1.0.)","title":"Development Approach"},{"location":"faq.html#frequent-releases","text":"Our development approach is to create frequent 0.x releases as we work towards version 1.0 . Currently we plan a new release approximately once every three (3) weeks, although the distance between some releases may take longer as our client obligations override our ability to stay on deadline.","title":"Frequent Releases"},{"location":"faq.html#the-smallest-next-thing","text":"For each of these releases we ask ourselves what is the smallest thing we can do that will have a meaningful positive impact on either our existing users or new prospective users. And then we schedule it as a milestone and start working.","title":"The Smallest Next Thing"},{"location":"faq.html#flexible-priorities","text":"Currently it is hard for us to look past the next milestone in specifics, as we are very aware of and interested in feedback from users; we'd rather be able to react to feedback when possible than put it off until after a really long time later.","title":"Flexible Priorities"},{"location":"faq.html#move-fast-resolve-issues-quickly","text":"Also, given WPLIb Box is pre-1.0 and we are moving fast, we may break things and/or implement a new feature where we have not thought through all the use-cases, but we'll move quickly to resolve any issues our fast moving creates and hopefully offer workarounds via Slack or GitHub issues in the mean time. For example, we recently implemented Nginx as a Docker container but did not provide user access to update the Nginx config files (but we plan to correct that the next release.)","title":"Move Fast, Resolve Issues Quickly"},{"location":"faq.html#until-version-10","text":"However, as we get closer and closer to 1.0 we'll be breaking things less and less and we'll be implemented fewer new features that are not fully baked upon release. It's basically our agile process of working towards a 1.0 release.","title":"Until Version 1.0"},{"location":"faq.html#business","text":"","title":"Business"},{"location":"faq.html#what-is-our-business-model","text":"We are a consulting company that is transitioning to a product company that offers products and services for improving Developer Experience for PHP developers who have chosen to use WordPress as a platform. If you have idea ahout how we could help your development organization with workflow please contact us with your ideas and we'll see if we can help.","title":"What is our Business Model?"},{"location":"feedback.html","text":"Feedback on WPLib Box \u00b6 Report any issues you have \u00b6 Suggestions and Ideas \u00b6","title":"Feedback"},{"location":"feedback.html#feedback-on-wplib-box","text":"","title":"Feedback on WPLib Box"},{"location":"feedback.html#report-any-issues-you-have","text":"","title":"Report any issues you have"},{"location":"feedback.html#suggestions-and-ideas","text":"","title":"Suggestions and Ideas"},{"location":"glossary.html","text":"NOT COMPLETE \u00b6 Glossary of Terms related to WPLib Box \u00b6 When working with a new tool you can often be overwhelmed by new jargon. While WPLib Box is unfortunately no different our vision is to empower you to understand everything you need to know to use WPLib Box effectively, such as this glossary. Note We are defining these terms as they related to WPLib Box. Thus our definitions may differ somewhat from more the general definitions such as those you might find on Wikipedia. Host Machine \u00b6 The Host machine is your physical computer that typically runs Windows, Mac or Linux, and that \"hosts\" WPLib Box similar to how your computer hosts a Microsoft Word document or an Apple Keynote presentation. Virtual Machine \u00b6 A Virtual Machine is a full Linux operating system that runs \"virtually\" within your Windows, Mac or Linux host computer . Or more clearly, a bit-for-bit image of what could have been a physical computer's file system to enable emulation of that \"computer\" using VirtualBox running within your \"Host\" computer. VirtualBox \u00b6 VirtualBox is open source software \u2014 recently acquired by Oracle \u2014 that is required by WPLib Box to enable the Linux virtual machine to run in your host Windows, Mac or Linux computer. Guest \u00b6 The WPLib Box Guest is the Linux-based virtual machine running within your host machine . Provisioning \u00b6 Provisioning is the process of installing and configuring the software stack on WPLib Box prior to your first use of WPLib Box. Provisioning includes tasks like importing an initial WordPress database from /sql/provision.sql and adding permissions to the same database. Components \u00b6 Components in the context of WPLib Box are packages of software that collectively comprise your WPlib Box's software stack . A component can be a container , a script, source code, or various other types of files. To learn more details about WPLib Box Components , click the preceding link. Containers \u00b6 Containers in the context of WPLib Box are used to package each service and executable component in its own sandbox to effectively eliminate the most common conflicts that occur between services and executables, and to be more flexible in terms of which services and executables can be incorporate into a project's software stack . WPLib Box strives to use individual Docker containers for all service and executable components it needs. This architecture decision is in large part why WPLib Box is more powerful and more flexible than any other local development solution for WordPress today. This architecture also empowers WPLib Box to more quickly support newer versions of services and executables, often enabling you \u2014 the WPLib Box user \u2014 to upgrade to a new version in the case we have not yet updated our official containers. Box Image \u00b6 A Box Image is a digital file containing the binary bits of WPLib Box's virtual machine . Note The box image format used by WPLib Box has been defined by Hashicorp 's Vagrant . WPLib Box's box image has been pre- provisioned with the WPLib Box software stack beyond what the default Linux distribution provides which is why in-part WPLib Box is so easy to get started (when compared to other solutions like VVV .) You can see the history of (most) WPLib Box images at Hashicorp's VagrantCloud repository of Vagrant images available for download. Note We say \"most\" WPLib Box images because when Hashicorp moved from its old \"Atlas\" repository to the current VagrantCloud they neglected to transfer over some of our historical releases and thus they have been lost to the mists of time. WPLib Box's current box image is based on Ubunutu , but we will soon be replacing it with a more streamlined Linux distribution. Vagrant \u00b6 Vagrant is software currently required by WPLib Box that reads a configuration file named Vagrantfile in your WordPress project's directory and it automates the creation and configuration of a virtual machine that is run using VirtualBox . Vagrant is software written in the Ruby programming language and it reads information from a Vagrantfile found in your project's directory on your host computer and it uses that information to download and configure WPLib Box. Note We plan to eliminate the need to use Vagrant in the very near future. At that point WPLib Box will only be dependent on VirtualBox . Vagrantfile \u00b6 A Vagrantfile is a specialized Ruby language script that is run by Vagrant to automate the setup of WPLib Box. Although a Ruby script, Vagrantfile is declarative in nature \u2014 more like a JSON file \u2014 as it was designed to allow you to \"declare\" the details needed by Vagrant to automate the creation and configuration of your virtual mahine using VirtualBox . The \"declarations\" in the Vagrantfile tell Vagrant what it needs to know to: (Initially) download the specified version of WPLib Box's box image \"_ into Vagrant's local box image cache on your host computer , Set the IP address for the WPLib Box virtual machine, Add the host name used to reference WPLib Box \u2014 e.g. wplib.box or example.local \u2014 to your host computer's hosts file , Mount your project directory on your host computer inside of WPLib Box so PHP and Nginx/Apache can access them, Specify the username to be used for vagrant ssh ; currently boxuser in WPLib Box's case and configure SSH agent forwarding , And finally, specify the (lightweight, in the case of WPLib Box) scripts to run on vagrant up , both for initial install and subsequent uses. Hosts file \u00b6 Your hosts file is a plain text file found on your host computer that contains one of more IP addresses mapped to domain names. The purpose of your hosts file is to allow you to override the entries found at your DNS server. In the case of WPLib Box with .local domain names, your DNS server has no knowledge of your local development. This WPLib Box needs to add entries to your hosts file to allow you to use domain names for local development instead of hard-to-remember ports and/or IP addresses; e.g. http:/localhost:8888 or http:/10.10.10.136 . Typically you at least have localhost defined in your hosts file: 127.0.0.1 localhost After WPLib Box is installed and configured 1 , your hosts file will look something like this (likely with a different IP address and Vagrant hash.) The following enables 127.0.0.1 localhost 10.10.10.136 wplib.box # VAGRANT: c1906b61bcd8c3211d7426a8a3310413 (default) / 4fdce32d-d9b3-$ 10.10.10.136 docs.wplib.box # VAGRANT: c1906b61bcd8c3211d7426a8a3310413 (default) / 4fdce32d-$ 10.10.10.136 www.wplib.box # VAGRANT: c1906b61bcd8c3211d7426a8a3310413 (default) / 4fdce32d-d$ 10.10.10.136 adminer.wplib.box # VAGRANT: c1906b61bcd8c3211d7426a8a3310413 (default) / 4fdce3$ 10.10.10.136 mailhog.wplib.box # VAGRANT: c1906b61bcd8c3211d7426a8a3310413 (default) / 4fdce3$ A bit of hosts file history Hosts files predate the Internet's Domain Name System (DNS) and were how early Internet users mapped hostnames to IP addresses. This meant every user had to know the IP address of every computer they wanted to visit on the internet, or at least the sysadmin for the computer needed to know the IP address. Clearly that quickly became overwhelming for everyone on the Internet and was why the DNS system was introduced. Local Box Image Cache \u00b6 The term Local Box Image Cache is a WPLib Box coined-term to name the pristine box image that Vagrant downloads to a local cache on your host computer to enable quick cloning for additional projects. vagrant up will clone a copy of this cached image into the project box image the first time it in run for a given Vagrantfile , but running vagrant destroy followed by a vagrant up will clone the cached box image too. Your local box image cache is located at : MacOS and Linux: ~/.vagrant.d/boxes Windows: C:\\Users\\{username}\\.vagrant.d\\boxes Project Box Image \u00b6 The term Project Box Image is another WPLib Box coined-term to name the project-specific copy of the pristine copy local box image cache that Vagrant makes for each project in the following project-specific subdirectory: Mac or Linux: {project}/.vagrant Windows: {project}\\.vagrant The upshot is if you vagrant ssh into a running Vagrant Box and make configuration changes those changes will be in the project box image, but not in the pristine copy of box image nor in other projects that share the same named Box Image. Beyond the project box image VirtualBox will import these images into its own directory for each project: Mac or Linux: ~/VirtualBox VMs Windows: C:\\Users\\{username}\\VirtualBox VMs Why we plan to stop using Vagrant This extremely inefficent use of storage is but one of the many reasons we are planning to replace Vagrant with our own solution in the very near future. Site Builder \u00b6 Here at the WPLib Box team we define a \"Site Builder\" as someone who installs WordPress, plugins, and themes \u2014 who might tweak the HTML, CSS, JS or PHP from time to time \u2014 but for the most part is not and does not consider themselves a \"programmer.\" We love professional Site Builders and think they provide an invaluable service to their clients so we are just as excited to hear from site builders how we can make WPLib Box better to help them their do their jobs as we are to hear from front-end or even backend WordPress developers. Front-end Developer \u00b6 Here at the WPLib Box team we define a \"Front-end Developer\" as someone who minimally has HTML and CSS skills \u2014 especially for responsive design \u2014 and who may or may not have Javascript programming skills and/or front-end build system skills combined with a CSS preprocessor like SASS or LESS. In our experience front-end development and theme development go hand-in-hand, although front-end developers can be found building plugins as well. And we love professional front-end developers as without them WordPress sites would never be as compelling nor as functional as so many WordPress sites and themes have become. So we are very interested to hear from front-end developers how we can make WPLib Box better to help them their do their jobs. Backend Developer \u00b6 Here at the WPLib Box team we define a \"Backend Developer\" as someone who focuses on the PHP, MySQL and possibly REST API aspects of a WordPress site. In our experience backend development and plugin development go hand-in-hand but that doesn't mean backend developers can't have significant sway over theme code as many back end developers do. And finally we love professional backend developers because frankly we are backend developers too! Without us, WordPress sites would never have the deep level of functionality that requires server-side coding and database expertise. So we are also very interested to hear from backend developers whose workflow may differ from our own so that we can make WPLib Box better for you. Project \u00b6 Most everything in WPLib Box is organized around the \"Project.\" A Project is identified by a primary local domain name e.g. example.local or example.test . A Project is assigned a directory for its source packages and data and media files which will be a subdirectory of the name identified by the primary local domain contained within the base projects directory . Thus if the base projects directory is ~/Sites and the project's local domain is example.local then the the project subdirectory would be ~/Sites/example.local . A Project also has a configuration file found in project subdirectory with the name project.json . It (should) contain all the information required for WPLib Box to completely recreate a working local development environment for its Project. As such, project.json files are typically version controlled and easily shared by team members. More specifically, a Project has an Project Stack that identifies the Components that WPLib Box will run and/or make available when the project is activated . This project stack is declared in the project.json file. Base Projects Directory \u00b6 A directory on your host computer that is mapped to /projects/ within WPLib Box. A typical example Base Projects Directory might be ~/Sites or C:\\Sites , if you are on MacOS/Linux or Windows, respectively. !!! info The projects directory inside the box will soon change In a near future version of WPLib Bix the /projects directory will be changed to /home/box/projects . (Software) Stack \u00b6 In general a \"(Software) Stack\" is the collection of software used by a software application to do its job. To host WordPress in WPLib Box the collection of software used consists of a web server like Nginx or Apache, a database server like MySQL or MariaDB, a version of PHP such as 5.6 or 7.2 and possibly a cache server like Memcached or Redis. Software Stack On Wikipedia A \" Software Stack \" on Wikipedia \u2014 such as LAMP , WIMP , and MEAN \u2014 is a name identifying sets of software needed to create a complete software solution . In the first of these \"L.A.M.P.\" identifies L)inux , A)pache , M)ySQL and P)HP , and LAMP is a well-known stack that supports the WordPress platform. Stack \u00b6 In the context of WPLib Box, a \"Stack\" is the collection of software components that turn a basic do-anything Linux virtual machine into a powerhouse tailor-made for the local development of WordPress websites, or the development of any other web solution, for that matter. Stacks can also extend other Stacks, or said another way one Stack and inherit the attributes of another. Our \"wordpress\" stack inherits from our \"lxmp\" stack, for example. For WPLib Box you have both Named Stacks and Project Stacks . Named Stack \u00b6 WPLib Box's \"Named Stacks\" specifies the \" Type \" of components required to support a web solution such as WordPress, or any other web solution. And a Named Stack also defines the number of each component(s) of a given type that are required, which is typically one each. However, a Named Stack is abstract and never used directly ; Project Stacks are used by WPLib Box instead. The detailed specifications for the Named Stacks WPLib Box supports at any given time can be found in the JSON files located in /opt/box/etc/stacks . Attention The initial JSON files for specifiying Named Stacks have not yet been finalized as of version 0.17.0 . Project Stack \u00b6 A WPLib Box \"Project Stack\" is specific to a Project , and is the collection of components specified in the \"stack\" property of a a project's project.json file. Typically an Project Stack will include all the required components for at least one named stack, such as \"wordpress\" , possibly its optional components, and then zero (0) of more general purposes components and/or components of other named stacks. This is an example of the default Project Stack from the default project.json for 0.17.0 : { \"stack\" : { \"wordpress/dbserver\": \"wplib/mysql:5.5.60\", \"wordpress/webserver\": \"wplib/nginx:1.14.0\", \"wordpress/processvm\": \"wplib/php:7.1.18\", \"wordpress/cacheserver\": \"wplib/redis:4.0.9\", \"wordpress/cliapp\": \"wplib/wp-cli:1.5.1\", \"mkdocs/webserver\": \"wplib/mkdocs:0.15.3\", \"box/mailsender\": \"wplib/mailhog:1.0.0\", \"box/webproxy\": \"wplib/proxy:1.14.0\", \"box/sqladmin\": \"wplib/adminer:4.6.2\" } } Attention As of version 0.17.0 Project stacks are only partially implemented, with some of the functionality being hard-coded into various aspects of WPLib Box. That however is planned to change in the near future. Component Type \u00b6 A \"Component Type\" is a specially-formatted name that identifies a set of component properties and behaviors that are required to support a given use-case within WPLib Box, for example a web server or database server. Component Types are identified by its two-part name , e.g. wordpress/webserver or wordpress/dbserver . The first part of the name identifies the \" Named Stack \" and the second part identifies the \" Interface \" relative to that Named Stack. The detailed specifications for the provided Component Types can be found inside of WPLib Box in the /opt/box/etc/types directory. In future versions of WPLib Box (beyond 0.17.0 ) you will be able to add your own Component Types. Attention The defining JSON files for Component Types have not yet been finalized as of version 0.17.0 . Component Type Interface \u00b6 A \"Component Type Interface\" specifies the details neededs by WPLib Box to install and activate a component as part of a WPLib Box project . These details include the \" Class \" of component and then the details that the specific class of component requires. Looking specifically at Service Containers the details needed for them include port number(s), IP address(es), volume(s), number and usage for mount points, etc. The detailed specifications for the known component type interfaces can be found in JSON files within /opt/box/etc/interfaces . Attention The defining JSON files for Component Types Interfaces have not yet been finalized as of version 0.17.0 . Component Class \u00b6 A \"Component Class\" is one of the following: Service Container \u2014 Services like Nginx and MySQL. Executable Container \u2014 Executables such as the PHP CLI. Script Package \u2014 Scripts like WP CLI, Composer and PHPUnit Source Package/Files \u2014 Source code such as WordPress core, plugins and themes Data Files \u2014 Data like MySQL dumps, XML and JSON files. Media Files \u2014 Media such as images, video and PDF files. Suggestions for Improvement \u00b6 If you have any terms to add or suggestions for improvement to our existing descriptions we welcome your suggestions. So please help out your fellow developers and fork this repo , make your fixes and then submit your pull request . Unless you have changed your host name in the HOSTNAME file, which you will almost certainly have done. \u21a9","title":"Glossary"},{"location":"glossary.html#not-complete","text":"","title":"NOT COMPLETE"},{"location":"glossary.html#glossary-of-terms-related-to-wplib-box","text":"When working with a new tool you can often be overwhelmed by new jargon. While WPLib Box is unfortunately no different our vision is to empower you to understand everything you need to know to use WPLib Box effectively, such as this glossary. Note We are defining these terms as they related to WPLib Box. Thus our definitions may differ somewhat from more the general definitions such as those you might find on Wikipedia.","title":"Glossary of Terms related to WPLib Box"},{"location":"glossary.html#host-machine","text":"The Host machine is your physical computer that typically runs Windows, Mac or Linux, and that \"hosts\" WPLib Box similar to how your computer hosts a Microsoft Word document or an Apple Keynote presentation.","title":"Host Machine"},{"location":"glossary.html#virtual-machine","text":"A Virtual Machine is a full Linux operating system that runs \"virtually\" within your Windows, Mac or Linux host computer . Or more clearly, a bit-for-bit image of what could have been a physical computer's file system to enable emulation of that \"computer\" using VirtualBox running within your \"Host\" computer.","title":"Virtual Machine"},{"location":"glossary.html#virtualbox","text":"VirtualBox is open source software \u2014 recently acquired by Oracle \u2014 that is required by WPLib Box to enable the Linux virtual machine to run in your host Windows, Mac or Linux computer.","title":"VirtualBox"},{"location":"glossary.html#guest","text":"The WPLib Box Guest is the Linux-based virtual machine running within your host machine .","title":"Guest"},{"location":"glossary.html#provisioning","text":"Provisioning is the process of installing and configuring the software stack on WPLib Box prior to your first use of WPLib Box. Provisioning includes tasks like importing an initial WordPress database from /sql/provision.sql and adding permissions to the same database.","title":"Provisioning"},{"location":"glossary.html#components","text":"Components in the context of WPLib Box are packages of software that collectively comprise your WPlib Box's software stack . A component can be a container , a script, source code, or various other types of files. To learn more details about WPLib Box Components , click the preceding link.","title":"Components"},{"location":"glossary.html#containers","text":"Containers in the context of WPLib Box are used to package each service and executable component in its own sandbox to effectively eliminate the most common conflicts that occur between services and executables, and to be more flexible in terms of which services and executables can be incorporate into a project's software stack . WPLib Box strives to use individual Docker containers for all service and executable components it needs. This architecture decision is in large part why WPLib Box is more powerful and more flexible than any other local development solution for WordPress today. This architecture also empowers WPLib Box to more quickly support newer versions of services and executables, often enabling you \u2014 the WPLib Box user \u2014 to upgrade to a new version in the case we have not yet updated our official containers.","title":"Containers"},{"location":"glossary.html#box-image","text":"A Box Image is a digital file containing the binary bits of WPLib Box's virtual machine . Note The box image format used by WPLib Box has been defined by Hashicorp 's Vagrant . WPLib Box's box image has been pre- provisioned with the WPLib Box software stack beyond what the default Linux distribution provides which is why in-part WPLib Box is so easy to get started (when compared to other solutions like VVV .) You can see the history of (most) WPLib Box images at Hashicorp's VagrantCloud repository of Vagrant images available for download. Note We say \"most\" WPLib Box images because when Hashicorp moved from its old \"Atlas\" repository to the current VagrantCloud they neglected to transfer over some of our historical releases and thus they have been lost to the mists of time. WPLib Box's current box image is based on Ubunutu , but we will soon be replacing it with a more streamlined Linux distribution.","title":"Box Image"},{"location":"glossary.html#vagrant","text":"Vagrant is software currently required by WPLib Box that reads a configuration file named Vagrantfile in your WordPress project's directory and it automates the creation and configuration of a virtual machine that is run using VirtualBox . Vagrant is software written in the Ruby programming language and it reads information from a Vagrantfile found in your project's directory on your host computer and it uses that information to download and configure WPLib Box. Note We plan to eliminate the need to use Vagrant in the very near future. At that point WPLib Box will only be dependent on VirtualBox .","title":"Vagrant"},{"location":"glossary.html#vagrantfile","text":"A Vagrantfile is a specialized Ruby language script that is run by Vagrant to automate the setup of WPLib Box. Although a Ruby script, Vagrantfile is declarative in nature \u2014 more like a JSON file \u2014 as it was designed to allow you to \"declare\" the details needed by Vagrant to automate the creation and configuration of your virtual mahine using VirtualBox . The \"declarations\" in the Vagrantfile tell Vagrant what it needs to know to: (Initially) download the specified version of WPLib Box's box image \"_ into Vagrant's local box image cache on your host computer , Set the IP address for the WPLib Box virtual machine, Add the host name used to reference WPLib Box \u2014 e.g. wplib.box or example.local \u2014 to your host computer's hosts file , Mount your project directory on your host computer inside of WPLib Box so PHP and Nginx/Apache can access them, Specify the username to be used for vagrant ssh ; currently boxuser in WPLib Box's case and configure SSH agent forwarding , And finally, specify the (lightweight, in the case of WPLib Box) scripts to run on vagrant up , both for initial install and subsequent uses.","title":"Vagrantfile"},{"location":"glossary.html#hosts-file","text":"Your hosts file is a plain text file found on your host computer that contains one of more IP addresses mapped to domain names. The purpose of your hosts file is to allow you to override the entries found at your DNS server. In the case of WPLib Box with .local domain names, your DNS server has no knowledge of your local development. This WPLib Box needs to add entries to your hosts file to allow you to use domain names for local development instead of hard-to-remember ports and/or IP addresses; e.g. http:/localhost:8888 or http:/10.10.10.136 . Typically you at least have localhost defined in your hosts file: 127.0.0.1 localhost After WPLib Box is installed and configured 1 , your hosts file will look something like this (likely with a different IP address and Vagrant hash.) The following enables 127.0.0.1 localhost 10.10.10.136 wplib.box # VAGRANT: c1906b61bcd8c3211d7426a8a3310413 (default) / 4fdce32d-d9b3-$ 10.10.10.136 docs.wplib.box # VAGRANT: c1906b61bcd8c3211d7426a8a3310413 (default) / 4fdce32d-$ 10.10.10.136 www.wplib.box # VAGRANT: c1906b61bcd8c3211d7426a8a3310413 (default) / 4fdce32d-d$ 10.10.10.136 adminer.wplib.box # VAGRANT: c1906b61bcd8c3211d7426a8a3310413 (default) / 4fdce3$ 10.10.10.136 mailhog.wplib.box # VAGRANT: c1906b61bcd8c3211d7426a8a3310413 (default) / 4fdce3$ A bit of hosts file history Hosts files predate the Internet's Domain Name System (DNS) and were how early Internet users mapped hostnames to IP addresses. This meant every user had to know the IP address of every computer they wanted to visit on the internet, or at least the sysadmin for the computer needed to know the IP address. Clearly that quickly became overwhelming for everyone on the Internet and was why the DNS system was introduced.","title":"Hosts file"},{"location":"glossary.html#local-box-image-cache","text":"The term Local Box Image Cache is a WPLib Box coined-term to name the pristine box image that Vagrant downloads to a local cache on your host computer to enable quick cloning for additional projects. vagrant up will clone a copy of this cached image into the project box image the first time it in run for a given Vagrantfile , but running vagrant destroy followed by a vagrant up will clone the cached box image too. Your local box image cache is located at : MacOS and Linux: ~/.vagrant.d/boxes Windows: C:\\Users\\{username}\\.vagrant.d\\boxes","title":"Local Box Image Cache"},{"location":"glossary.html#project-box-image","text":"The term Project Box Image is another WPLib Box coined-term to name the project-specific copy of the pristine copy local box image cache that Vagrant makes for each project in the following project-specific subdirectory: Mac or Linux: {project}/.vagrant Windows: {project}\\.vagrant The upshot is if you vagrant ssh into a running Vagrant Box and make configuration changes those changes will be in the project box image, but not in the pristine copy of box image nor in other projects that share the same named Box Image. Beyond the project box image VirtualBox will import these images into its own directory for each project: Mac or Linux: ~/VirtualBox VMs Windows: C:\\Users\\{username}\\VirtualBox VMs Why we plan to stop using Vagrant This extremely inefficent use of storage is but one of the many reasons we are planning to replace Vagrant with our own solution in the very near future.","title":"Project Box Image"},{"location":"glossary.html#site-builder","text":"Here at the WPLib Box team we define a \"Site Builder\" as someone who installs WordPress, plugins, and themes \u2014 who might tweak the HTML, CSS, JS or PHP from time to time \u2014 but for the most part is not and does not consider themselves a \"programmer.\" We love professional Site Builders and think they provide an invaluable service to their clients so we are just as excited to hear from site builders how we can make WPLib Box better to help them their do their jobs as we are to hear from front-end or even backend WordPress developers.","title":"Site Builder"},{"location":"glossary.html#front-end-developer","text":"Here at the WPLib Box team we define a \"Front-end Developer\" as someone who minimally has HTML and CSS skills \u2014 especially for responsive design \u2014 and who may or may not have Javascript programming skills and/or front-end build system skills combined with a CSS preprocessor like SASS or LESS. In our experience front-end development and theme development go hand-in-hand, although front-end developers can be found building plugins as well. And we love professional front-end developers as without them WordPress sites would never be as compelling nor as functional as so many WordPress sites and themes have become. So we are very interested to hear from front-end developers how we can make WPLib Box better to help them their do their jobs.","title":"Front-end Developer"},{"location":"glossary.html#backend-developer","text":"Here at the WPLib Box team we define a \"Backend Developer\" as someone who focuses on the PHP, MySQL and possibly REST API aspects of a WordPress site. In our experience backend development and plugin development go hand-in-hand but that doesn't mean backend developers can't have significant sway over theme code as many back end developers do. And finally we love professional backend developers because frankly we are backend developers too! Without us, WordPress sites would never have the deep level of functionality that requires server-side coding and database expertise. So we are also very interested to hear from backend developers whose workflow may differ from our own so that we can make WPLib Box better for you.","title":"Backend Developer"},{"location":"glossary.html#project","text":"Most everything in WPLib Box is organized around the \"Project.\" A Project is identified by a primary local domain name e.g. example.local or example.test . A Project is assigned a directory for its source packages and data and media files which will be a subdirectory of the name identified by the primary local domain contained within the base projects directory . Thus if the base projects directory is ~/Sites and the project's local domain is example.local then the the project subdirectory would be ~/Sites/example.local . A Project also has a configuration file found in project subdirectory with the name project.json . It (should) contain all the information required for WPLib Box to completely recreate a working local development environment for its Project. As such, project.json files are typically version controlled and easily shared by team members. More specifically, a Project has an Project Stack that identifies the Components that WPLib Box will run and/or make available when the project is activated . This project stack is declared in the project.json file.","title":"Project"},{"location":"glossary.html#base-projects-directory","text":"A directory on your host computer that is mapped to /projects/ within WPLib Box. A typical example Base Projects Directory might be ~/Sites or C:\\Sites , if you are on MacOS/Linux or Windows, respectively. !!! info The projects directory inside the box will soon change In a near future version of WPLib Bix the /projects directory will be changed to /home/box/projects .","title":"Base Projects Directory"},{"location":"glossary.html#software-stack","text":"In general a \"(Software) Stack\" is the collection of software used by a software application to do its job. To host WordPress in WPLib Box the collection of software used consists of a web server like Nginx or Apache, a database server like MySQL or MariaDB, a version of PHP such as 5.6 or 7.2 and possibly a cache server like Memcached or Redis. Software Stack On Wikipedia A \" Software Stack \" on Wikipedia \u2014 such as LAMP , WIMP , and MEAN \u2014 is a name identifying sets of software needed to create a complete software solution . In the first of these \"L.A.M.P.\" identifies L)inux , A)pache , M)ySQL and P)HP , and LAMP is a well-known stack that supports the WordPress platform.","title":"(Software) Stack"},{"location":"glossary.html#stack","text":"In the context of WPLib Box, a \"Stack\" is the collection of software components that turn a basic do-anything Linux virtual machine into a powerhouse tailor-made for the local development of WordPress websites, or the development of any other web solution, for that matter. Stacks can also extend other Stacks, or said another way one Stack and inherit the attributes of another. Our \"wordpress\" stack inherits from our \"lxmp\" stack, for example. For WPLib Box you have both Named Stacks and Project Stacks .","title":"Stack"},{"location":"glossary.html#named-stack","text":"WPLib Box's \"Named Stacks\" specifies the \" Type \" of components required to support a web solution such as WordPress, or any other web solution. And a Named Stack also defines the number of each component(s) of a given type that are required, which is typically one each. However, a Named Stack is abstract and never used directly ; Project Stacks are used by WPLib Box instead. The detailed specifications for the Named Stacks WPLib Box supports at any given time can be found in the JSON files located in /opt/box/etc/stacks . Attention The initial JSON files for specifiying Named Stacks have not yet been finalized as of version 0.17.0 .","title":"Named Stack"},{"location":"glossary.html#project-stack","text":"A WPLib Box \"Project Stack\" is specific to a Project , and is the collection of components specified in the \"stack\" property of a a project's project.json file. Typically an Project Stack will include all the required components for at least one named stack, such as \"wordpress\" , possibly its optional components, and then zero (0) of more general purposes components and/or components of other named stacks. This is an example of the default Project Stack from the default project.json for 0.17.0 : { \"stack\" : { \"wordpress/dbserver\": \"wplib/mysql:5.5.60\", \"wordpress/webserver\": \"wplib/nginx:1.14.0\", \"wordpress/processvm\": \"wplib/php:7.1.18\", \"wordpress/cacheserver\": \"wplib/redis:4.0.9\", \"wordpress/cliapp\": \"wplib/wp-cli:1.5.1\", \"mkdocs/webserver\": \"wplib/mkdocs:0.15.3\", \"box/mailsender\": \"wplib/mailhog:1.0.0\", \"box/webproxy\": \"wplib/proxy:1.14.0\", \"box/sqladmin\": \"wplib/adminer:4.6.2\" } } Attention As of version 0.17.0 Project stacks are only partially implemented, with some of the functionality being hard-coded into various aspects of WPLib Box. That however is planned to change in the near future.","title":"Project Stack"},{"location":"glossary.html#component-type","text":"A \"Component Type\" is a specially-formatted name that identifies a set of component properties and behaviors that are required to support a given use-case within WPLib Box, for example a web server or database server. Component Types are identified by its two-part name , e.g. wordpress/webserver or wordpress/dbserver . The first part of the name identifies the \" Named Stack \" and the second part identifies the \" Interface \" relative to that Named Stack. The detailed specifications for the provided Component Types can be found inside of WPLib Box in the /opt/box/etc/types directory. In future versions of WPLib Box (beyond 0.17.0 ) you will be able to add your own Component Types. Attention The defining JSON files for Component Types have not yet been finalized as of version 0.17.0 .","title":"Component Type"},{"location":"glossary.html#component-type-interface","text":"A \"Component Type Interface\" specifies the details neededs by WPLib Box to install and activate a component as part of a WPLib Box project . These details include the \" Class \" of component and then the details that the specific class of component requires. Looking specifically at Service Containers the details needed for them include port number(s), IP address(es), volume(s), number and usage for mount points, etc. The detailed specifications for the known component type interfaces can be found in JSON files within /opt/box/etc/interfaces . Attention The defining JSON files for Component Types Interfaces have not yet been finalized as of version 0.17.0 .","title":"Component Type Interface"},{"location":"glossary.html#component-class","text":"A \"Component Class\" is one of the following: Service Container \u2014 Services like Nginx and MySQL. Executable Container \u2014 Executables such as the PHP CLI. Script Package \u2014 Scripts like WP CLI, Composer and PHPUnit Source Package/Files \u2014 Source code such as WordPress core, plugins and themes Data Files \u2014 Data like MySQL dumps, XML and JSON files. Media Files \u2014 Media such as images, video and PDF files.","title":"Component Class"},{"location":"glossary.html#suggestions-for-improvement","text":"If you have any terms to add or suggestions for improvement to our existing descriptions we welcome your suggestions. So please help out your fellow developers and fork this repo , make your fixes and then submit your pull request . Unless you have changed your host name in the HOSTNAME file, which you will almost certainly have done. \u21a9","title":"Suggestions for Improvement"},{"location":"philosophy.html","text":"NOT YET COMPLETE \u00b6 Philosophy Governing WPLib Box \u00b6 The following philosophies are those the WPLib Box team uses to govern our strategic vision and tactical decision regarding everything we do related to WPLib Box. Make development easier \u00b6 Our #1 job is to make WordPress development easier . Full stop. Everything we decide and everything we do contributes to this goal. Both for the site, theme and/or plugin building newbie as well as the most advanced WordPress developer on the planet. It should just work \u00b6 First and foremost, WPLib Box should be like dial tone on a telephone land line and that is it should always just work . If at all possible WPLib Box should never leave you stuck with a broken local development environment simply because you may do not have the Linux expertise or the time to fix a problem, especially when you are in the 11th hour of an intense project that needs to be done tomorrow morning! The box should never fail on you in those, or any circumstances. Yes \"never failing\" is idealistic Yes, we admit, \"never failing\" is idealistic. However, we can and do strive to achive as close to 100% of that goal as we possibly can. It was for this reason we decided to eliminate the need for Vagrant (which we should get to in the very near future.) So our primary goal is: You should always be able to depend on WPLib Box. But because software is complex and we cannot guarantee that the software we depend on will not leave you stuck, we are more than happy to support you for free whenever you need, especially on Slack. Provide instruction in error messages \u00b6 If WPLib Box generates an error message, the message should include the instructions that you would need to resolve the issue. This is an ideal, but the only acceptable exception to this ideal is if that it is simply not possible. Functionality should be in the box \u00b6 If functionality that can benefit users can be installed and run in the box, it should be installed and run in the box (instead of needing to be installed and run on the host computer .) This means that you should not need to install Grunt/Gulp/WebPack, Composer, WP CLI, PHPUnit, etc. on your host computer when you have WPLib Box to do it for you. Everything you want or need for WordPress development should be pre-packaged and available to run from within the box. Why? So you never need to try to install and then have to debug the install of a new developer tool again. Thus, if can run in the box, it should run in the box. We are not here yet While this is one of the things we badly want to see happen, we have not gotten all the the standard functionality WordPress developers will want to use running in the box. For example, we do have Composer and WP CLI, but not PHPUnit or anything requiring NodeJS/NPM. Why? Because unlike servers delivered as binaries, all of these tools are delivered as scripts that require a PHP or Javascript runtime. And while we could package the runtime with their script into a container we want to implement a better architecture that allow us to pair scripts with a container that provides the necessary runtime. Still, we know that shipping is a feature so if you have an urgent need for any of these tools or other tools that are not currently implement please reach out to us on Slack Functionality should be containerized \u00b6 If we or any users add functionality to WPLib Box it should be added via container, never installed directly in the virtual machine unless otherwise impossible. All service running in the box, and all executables to be run in the box should be packages in a container. We will never just install software directly into Linux \u2014 except Docker itself and a few other infrastructure bits \u2014 and we'd advise you not to do so either. This means at times software will not behave as expected because the software was written within expecting to be run in a container. If you run into any of these cases we ask that you contact us for support so we can either find a solution for you or a workaround. Proactively notify about issues \u00b6 If WPLib Box can in any way proactively recognize that a user would be having an error then it should notify the user of that error in advance, in an non-obtrusive and easily dismissable manner. We are not there yet While this is one of the things we badly want to see happen, we have not gotten to the point where we can users of issues in advance the way we envision. But good things come to those wait (just a bit longer.) Empower best-practices \u00b6 Too many people avoid best practices in WordPress because following them can take too much time to setup and learn. So a key goal for WPLib Box is to make following best practices easier than not . Be it 1.) using test, stage and production servers, 2.) implementing automated testing, 3.) version-controlling your source, or 4.) developing structured object-oriented code WPLib Box should make implementation of those best practices and more trivial, and it should make learning how to use them easy. So much so that you'll wonder how you ever managed to cowboy code in your past. We are not here yet While this is one of the things we badly want to see happen, we have not gotten to the point where we can empower best practices in the way we envision. But good things come to those wait (just a bit longer.) These are not all \u00b6 This page is not yet complete, so expect more points related to our philosophy in the future.","title":"Philosophy"},{"location":"philosophy.html#not-yet-complete","text":"","title":"NOT YET COMPLETE"},{"location":"philosophy.html#philosophy-governing-wplib-box","text":"The following philosophies are those the WPLib Box team uses to govern our strategic vision and tactical decision regarding everything we do related to WPLib Box.","title":"Philosophy Governing WPLib Box"},{"location":"philosophy.html#make-development-easier","text":"Our #1 job is to make WordPress development easier . Full stop. Everything we decide and everything we do contributes to this goal. Both for the site, theme and/or plugin building newbie as well as the most advanced WordPress developer on the planet.","title":"Make development easier"},{"location":"philosophy.html#it-should-just-work","text":"First and foremost, WPLib Box should be like dial tone on a telephone land line and that is it should always just work . If at all possible WPLib Box should never leave you stuck with a broken local development environment simply because you may do not have the Linux expertise or the time to fix a problem, especially when you are in the 11th hour of an intense project that needs to be done tomorrow morning! The box should never fail on you in those, or any circumstances. Yes \"never failing\" is idealistic Yes, we admit, \"never failing\" is idealistic. However, we can and do strive to achive as close to 100% of that goal as we possibly can. It was for this reason we decided to eliminate the need for Vagrant (which we should get to in the very near future.) So our primary goal is: You should always be able to depend on WPLib Box. But because software is complex and we cannot guarantee that the software we depend on will not leave you stuck, we are more than happy to support you for free whenever you need, especially on Slack.","title":"It should just work"},{"location":"philosophy.html#provide-instruction-in-error-messages","text":"If WPLib Box generates an error message, the message should include the instructions that you would need to resolve the issue. This is an ideal, but the only acceptable exception to this ideal is if that it is simply not possible.","title":"Provide instruction in error messages"},{"location":"philosophy.html#functionality-should-be-in-the-box","text":"If functionality that can benefit users can be installed and run in the box, it should be installed and run in the box (instead of needing to be installed and run on the host computer .) This means that you should not need to install Grunt/Gulp/WebPack, Composer, WP CLI, PHPUnit, etc. on your host computer when you have WPLib Box to do it for you. Everything you want or need for WordPress development should be pre-packaged and available to run from within the box. Why? So you never need to try to install and then have to debug the install of a new developer tool again. Thus, if can run in the box, it should run in the box. We are not here yet While this is one of the things we badly want to see happen, we have not gotten all the the standard functionality WordPress developers will want to use running in the box. For example, we do have Composer and WP CLI, but not PHPUnit or anything requiring NodeJS/NPM. Why? Because unlike servers delivered as binaries, all of these tools are delivered as scripts that require a PHP or Javascript runtime. And while we could package the runtime with their script into a container we want to implement a better architecture that allow us to pair scripts with a container that provides the necessary runtime. Still, we know that shipping is a feature so if you have an urgent need for any of these tools or other tools that are not currently implement please reach out to us on Slack","title":"Functionality should be in the box"},{"location":"philosophy.html#functionality-should-be-containerized","text":"If we or any users add functionality to WPLib Box it should be added via container, never installed directly in the virtual machine unless otherwise impossible. All service running in the box, and all executables to be run in the box should be packages in a container. We will never just install software directly into Linux \u2014 except Docker itself and a few other infrastructure bits \u2014 and we'd advise you not to do so either. This means at times software will not behave as expected because the software was written within expecting to be run in a container. If you run into any of these cases we ask that you contact us for support so we can either find a solution for you or a workaround.","title":"Functionality should be containerized"},{"location":"philosophy.html#proactively-notify-about-issues","text":"If WPLib Box can in any way proactively recognize that a user would be having an error then it should notify the user of that error in advance, in an non-obtrusive and easily dismissable manner. We are not there yet While this is one of the things we badly want to see happen, we have not gotten to the point where we can users of issues in advance the way we envision. But good things come to those wait (just a bit longer.)","title":"Proactively notify about issues"},{"location":"philosophy.html#empower-best-practices","text":"Too many people avoid best practices in WordPress because following them can take too much time to setup and learn. So a key goal for WPLib Box is to make following best practices easier than not . Be it 1.) using test, stage and production servers, 2.) implementing automated testing, 3.) version-controlling your source, or 4.) developing structured object-oriented code WPLib Box should make implementation of those best practices and more trivial, and it should make learning how to use them easy. So much so that you'll wonder how you ever managed to cowboy code in your past. We are not here yet While this is one of the things we badly want to see happen, we have not gotten to the point where we can empower best practices in the way we envision. But good things come to those wait (just a bit longer.)","title":"Empower best-practices"},{"location":"philosophy.html#these-are-not-all","text":"This page is not yet complete, so expect more points related to our philosophy in the future.","title":"These are not all"},{"location":"roadmap.html","text":"OLDER CONTENT; NOT YET EDITED \u00b6 The WPLib Box Roadmap \u00b6 At this point our \"Roadmap\" is more of a work-in-progress vision document as the project only has one sponsor and thus no dedicated staff so we really cannot commit to any timelines (yet). (But if you want to sponsor the project to help us reach a dedicated staff level, please contact us... ) You might be interested in: \u00b6 Before you read about our planned milestones you might be interested in the following background: + Audience - Who is WPLib Box for? + Approach - What is our development approach ( prior to version 1.0 ) ? + Features - What are the Features of WPLib Box? Milestones Planned for 1.0 \u00b6 The following are roughly in order of our plans to address: New Installable Types Box Command Line Interface (CLI) Tool Deployment to Feature, Staging and Production Hosts One Box for Many Projects Box Automated Testing Box RESTful API Box Admin UI Future Installable Containers Eliminate use of Vagrant and VirtualBox New Installable Types \u00b6 \" Installables \" represent the WPLib Box's extension mechanism we use to quickly create new plugin-and-play functionality for WPLib Box, and to empower 3rd party developers to do the same. Currently Installables must be Docker Containers that add functionality to WPLib Box, and offer one of the following classes of functionality : webserver , dbserver , kvstore and/or processvm . For our roadmap we plan to offer: New classes of functionality for containers as we recognize additional use-cases and requirements and New types of installables not implemented as containers. These could potentially be, but not limited to the following: a. WordPress plugins, especially those supporting SaaS solutions b. WordPress themes, potentially with bundled plugins c. Site blueprints containing plugins, themes and other files d. Additional commands for the Box CLI e. Command lines tools e. IDE and editor support f. Anything else that developers find they need to have the ultimate WordPress development environment. Box Command Line Interface (CLI) Tool \u00b6 Currently WPLib Box has a simple box command line tool that is accessible when running an SSH shell inside the box, accessed via vagrant ssh . However we have yet to document that tool because we have plans for a completely redeveloped CLI tool. Our planned CLI tool will run both inside WPLib Box via SSH and also run the same commands from a Mac host terminal. In addition we plan to create an equivalent command line tool for Windows. Deployment to Feature, Staging and Production Hosts \u00b6 A local development server is all well and grand but if you cannot deploy to your staging and/or production environments it leaves much to be desired. Our goal is to enable the deployment process to be trivial for WPLib Box users. Initially we plan to just provide code deployment where you would push code from local development to staging to production and pull database and files from production to staging to local development. Later however we intend to address pushing changes from the database in local development up to staging and production, but we will not achieve that in the short term. In addition, we envision supporting many different hosts as you need per project, e.g. staging, production and as many feature branch servers as you will ever need. And finally we intend to support hosts so that you can different hosting providers; e.g. you could deploy staging to a cheap shared Cpanel server and deploy production to an expensive Pagely account. We are currently working on these: \u00b6 Pantheon and WPEngine We will probably tackle these next: \u00b6 Digital Ocean , Linode , Google Compute Engine , Amazon Web Services , CPanel Server , Vultr , Kyup We will address these when and if clients need them or vendors support us financially: \u00b6 We could also add deployment support these if support is contributed by one of our users or by the vendors themselves. - Cloudways - Pagely , Kinsta , Pressable , Presslabs , WebSynthesis , Flywheel , Pressed - SiteGround , Liquid Web , DreamHost , Media Temple , GoDaddy , Lightning Base - WordPress VIP , Microsoft Azure One Box for Many Projects \u00b6 Multi-project is our \"holy grail\" , and that which we cannot reach version 1.0 without. Currently WPLib Box is a single project box. But our plan is to move to multi-project where each WordPress installation is a project, which can be a WordPress single-site or multisite install. Our initial reason for creating WPLib Box is the fact that VVV was very heavy with more than just a few site and so we have a lot of engineering to complete to ensure that WPLib Box continues to feel as light as it does while still being able to support a large number of site in current and prior development. Box Automated Testing \u00b6 As developers we know that test-centric development is a best practice, even if we don't always do it. And there are tools like PHPUnit , Behat and Codeception , that leave little excuse for not using automated testing in your projects But as far as we know there are not standard testing frameworks for solutions like WPLib Box because there are so few people actually building solutions like WPLib Box. So we intend to figure this out and probably build our own tools in order that we can deliver new releases which are fully tested in advance. Box RESTful API \u00b6 We envision WPLib Box as containing a set of services that allow very simply configuration and administration of the most common use-cases. For example, adding a project to the box with its own hostname and WordPress installation should be trivially easy, not require the user possess any system administration skills, and it should both \"Just work\" and \"Never break.\" Clearly if we provided just a CLI and an end-user admin UI we would enable such configuration and administration but we believe we should go one step better and implement a RESTful API. This API will enable code running on a host computer to call into a box to perform any and all configuration and administration tasks This will empower users and 3rd party developers to create tools for WPLib Box that we'd never envision or simply that we have yet to implement. Matter of fact, we intend to implement our HOST CLI functionality by having it call our RESTful API which will in turn delegate to the same CLI running inside of WPLib Box. When run outside the box the CLI will call the API and when run inside the box the CLI will actually execute the task. We also intend to develop our admin user interface using this API. Or as so many other tech companies like to say, we plan to \"eat our own dog food.\" Box Admin UI \u00b6 After we have the majority of the box CLI tool and the majority of the RESTful API completed we intend to develop an admin user interface for the box using GitHub's Electron platform for the Mac and Windows desktop app, and React for the Single Page App functionality. This Admin UI will mirror the functionality provided by the Box CLI and the RESTful API with the addition of any functionality required that is specific to the Mac and Windows host. Future Installable Containers \u00b6 The following are installable containers we have discussed and/or considered. Depending on user interest, we might implement these ourselves at some point, or adopt installables created by our users or the solution's vendor. OpenLiteSpeed Web Server Percona Server for MySQL Gearman ElasticSearch ZeroMQ RabbitMQ PHPUnit Behat Codeception If you don't see what you need on this list, please nominate a potential future installable . And if you are interested in developing it, please be sure to mention then, and also please join our Slack so we can reach out to you to discuss directly. We do not use the term single-site vs. multisite because we do not want to confuse with WordPress Multisite functionality; our current single project box can support WordPress Multisite just fine. Eliminate use of Vagrant and VirtualBox \u00b6 Our final version 1.0 goal is to move beyond Vagrant and VirtualBox and run within our own self-contained Linux environment that can run as seamlessly as running any desktop application might be. This is the last step we will tackle before we are ready to release version 1.0. The Open Source WPLib Box; Always Free \u00b6 Lastly, our goal for for WordPress developers to love WPLib Box and _willingly choose it over any other local development solution and for that we know that we will need to ensure our open-source WPLib Box software is always free to individual developers. And while we do plan to build a revenue-generating business out of WPLib Box, we pledge to only charge for those things where we have direct hard costs and/or where the benefits-of-use accrue to the non-developers; the project managers, the business people and/or the executive team, not the things that only benefit individual developers. One such example might be tools for secure team development on WPLib Box. Frankly we are building it not quite sure what the business model will be but confident if we build a tool that all WordPress developers love we will find a way to fund our operations.","title":"Roadmap"},{"location":"roadmap.html#older-content-not-yet-edited","text":"","title":"OLDER CONTENT; NOT YET EDITED"},{"location":"roadmap.html#the-wplib-box-roadmap","text":"At this point our \"Roadmap\" is more of a work-in-progress vision document as the project only has one sponsor and thus no dedicated staff so we really cannot commit to any timelines (yet). (But if you want to sponsor the project to help us reach a dedicated staff level, please contact us... )","title":"The WPLib Box Roadmap"},{"location":"roadmap.html#you-might-be-interested-in","text":"Before you read about our planned milestones you might be interested in the following background: + Audience - Who is WPLib Box for? + Approach - What is our development approach ( prior to version 1.0 ) ? + Features - What are the Features of WPLib Box?","title":"You might be interested in:"},{"location":"roadmap.html#milestones-planned-for-10","text":"The following are roughly in order of our plans to address: New Installable Types Box Command Line Interface (CLI) Tool Deployment to Feature, Staging and Production Hosts One Box for Many Projects Box Automated Testing Box RESTful API Box Admin UI Future Installable Containers Eliminate use of Vagrant and VirtualBox","title":"Milestones Planned for 1.0"},{"location":"roadmap.html#new-installable-types","text":"\" Installables \" represent the WPLib Box's extension mechanism we use to quickly create new plugin-and-play functionality for WPLib Box, and to empower 3rd party developers to do the same. Currently Installables must be Docker Containers that add functionality to WPLib Box, and offer one of the following classes of functionality : webserver , dbserver , kvstore and/or processvm . For our roadmap we plan to offer: New classes of functionality for containers as we recognize additional use-cases and requirements and New types of installables not implemented as containers. These could potentially be, but not limited to the following: a. WordPress plugins, especially those supporting SaaS solutions b. WordPress themes, potentially with bundled plugins c. Site blueprints containing plugins, themes and other files d. Additional commands for the Box CLI e. Command lines tools e. IDE and editor support f. Anything else that developers find they need to have the ultimate WordPress development environment.","title":"New Installable Types"},{"location":"roadmap.html#box-command-line-interface-cli-tool","text":"Currently WPLib Box has a simple box command line tool that is accessible when running an SSH shell inside the box, accessed via vagrant ssh . However we have yet to document that tool because we have plans for a completely redeveloped CLI tool. Our planned CLI tool will run both inside WPLib Box via SSH and also run the same commands from a Mac host terminal. In addition we plan to create an equivalent command line tool for Windows.","title":"Box Command Line Interface (CLI) Tool"},{"location":"roadmap.html#deployment-to-feature-staging-and-production-hosts","text":"A local development server is all well and grand but if you cannot deploy to your staging and/or production environments it leaves much to be desired. Our goal is to enable the deployment process to be trivial for WPLib Box users. Initially we plan to just provide code deployment where you would push code from local development to staging to production and pull database and files from production to staging to local development. Later however we intend to address pushing changes from the database in local development up to staging and production, but we will not achieve that in the short term. In addition, we envision supporting many different hosts as you need per project, e.g. staging, production and as many feature branch servers as you will ever need. And finally we intend to support hosts so that you can different hosting providers; e.g. you could deploy staging to a cheap shared Cpanel server and deploy production to an expensive Pagely account.","title":"Deployment to Feature, Staging and Production Hosts"},{"location":"roadmap.html#we-are-currently-working-on-these","text":"Pantheon and WPEngine","title":"We are currently working on these:"},{"location":"roadmap.html#we-will-probably-tackle-these-next","text":"Digital Ocean , Linode , Google Compute Engine , Amazon Web Services , CPanel Server , Vultr , Kyup","title":"We will probably tackle these next:"},{"location":"roadmap.html#we-will-address-these-when-and-if-clients-need-them-or-vendors-support-us-financially","text":"We could also add deployment support these if support is contributed by one of our users or by the vendors themselves. - Cloudways - Pagely , Kinsta , Pressable , Presslabs , WebSynthesis , Flywheel , Pressed - SiteGround , Liquid Web , DreamHost , Media Temple , GoDaddy , Lightning Base - WordPress VIP , Microsoft Azure","title":"We will address these when and if clients need them or vendors support us financially:"},{"location":"roadmap.html#one-box-for-many-projects","text":"Multi-project is our \"holy grail\" , and that which we cannot reach version 1.0 without. Currently WPLib Box is a single project box. But our plan is to move to multi-project where each WordPress installation is a project, which can be a WordPress single-site or multisite install. Our initial reason for creating WPLib Box is the fact that VVV was very heavy with more than just a few site and so we have a lot of engineering to complete to ensure that WPLib Box continues to feel as light as it does while still being able to support a large number of site in current and prior development.","title":"One Box for Many Projects"},{"location":"roadmap.html#box-automated-testing","text":"As developers we know that test-centric development is a best practice, even if we don't always do it. And there are tools like PHPUnit , Behat and Codeception , that leave little excuse for not using automated testing in your projects But as far as we know there are not standard testing frameworks for solutions like WPLib Box because there are so few people actually building solutions like WPLib Box. So we intend to figure this out and probably build our own tools in order that we can deliver new releases which are fully tested in advance.","title":"Box Automated Testing"},{"location":"roadmap.html#box-restful-api","text":"We envision WPLib Box as containing a set of services that allow very simply configuration and administration of the most common use-cases. For example, adding a project to the box with its own hostname and WordPress installation should be trivially easy, not require the user possess any system administration skills, and it should both \"Just work\" and \"Never break.\" Clearly if we provided just a CLI and an end-user admin UI we would enable such configuration and administration but we believe we should go one step better and implement a RESTful API. This API will enable code running on a host computer to call into a box to perform any and all configuration and administration tasks This will empower users and 3rd party developers to create tools for WPLib Box that we'd never envision or simply that we have yet to implement. Matter of fact, we intend to implement our HOST CLI functionality by having it call our RESTful API which will in turn delegate to the same CLI running inside of WPLib Box. When run outside the box the CLI will call the API and when run inside the box the CLI will actually execute the task. We also intend to develop our admin user interface using this API. Or as so many other tech companies like to say, we plan to \"eat our own dog food.\"","title":"Box RESTful API"},{"location":"roadmap.html#box-admin-ui","text":"After we have the majority of the box CLI tool and the majority of the RESTful API completed we intend to develop an admin user interface for the box using GitHub's Electron platform for the Mac and Windows desktop app, and React for the Single Page App functionality. This Admin UI will mirror the functionality provided by the Box CLI and the RESTful API with the addition of any functionality required that is specific to the Mac and Windows host.","title":"Box Admin UI"},{"location":"roadmap.html#future-installable-containers","text":"The following are installable containers we have discussed and/or considered. Depending on user interest, we might implement these ourselves at some point, or adopt installables created by our users or the solution's vendor. OpenLiteSpeed Web Server Percona Server for MySQL Gearman ElasticSearch ZeroMQ RabbitMQ PHPUnit Behat Codeception If you don't see what you need on this list, please nominate a potential future installable . And if you are interested in developing it, please be sure to mention then, and also please join our Slack so we can reach out to you to discuss directly. We do not use the term single-site vs. multisite because we do not want to confuse with WordPress Multisite functionality; our current single project box can support WordPress Multisite just fine.","title":"Future Installable Containers"},{"location":"roadmap.html#eliminate-use-of-vagrant-and-virtualbox","text":"Our final version 1.0 goal is to move beyond Vagrant and VirtualBox and run within our own self-contained Linux environment that can run as seamlessly as running any desktop application might be. This is the last step we will tackle before we are ready to release version 1.0.","title":"Eliminate use of Vagrant and VirtualBox"},{"location":"roadmap.html#the-open-source-wplib-box-always-free","text":"Lastly, our goal for for WordPress developers to love WPLib Box and _willingly choose it over any other local development solution and for that we know that we will need to ensure our open-source WPLib Box software is always free to individual developers. And while we do plan to build a revenue-generating business out of WPLib Box, we pledge to only charge for those things where we have direct hard costs and/or where the benefits-of-use accrue to the non-developers; the project managers, the business people and/or the executive team, not the things that only benefit individual developers. One such example might be tools for secure team development on WPLib Box. Frankly we are building it not quite sure what the business model will be but confident if we build a tool that all WordPress developers love we will find a way to fund our operations.","title":"The Open Source WPLib Box; Always Free"},{"location":"support.html","text":"Support Options for WPLib Box \u00b6 Our goal is for WPlib Box to be your preferred choice for local WordPress development thus we actively want to support you . So please, do not be shy or worry you might be bothering us. Learning about your experience with WPLib Box will allow us to make WPLib Box that much better for you, and for everyone else. Slack \u00b6 Slack for Urgent Help \u00b6 Please join our Slack to get help direct from our team in our #box channel. Also Slack for Non-urgent Help \u00b6 And even if your needs are not urgent, we really do want to talk to you so we can learn how WPLib Box can better meet your needs. Documenting Issues on GitHub \u00b6 After contacting us on Slack it is really helpful if you can submit a GitHub issue for any bugs or feature requests to ensure we can track them until they are addressed. Twitter to Ask Simple Questions \u00b6 If you have a simple question or a feature request, please do not hesistate to tweet us at @wplib . You might also want to cc our project lead @mikeschinkel too. One-on-One GoToMeeting Help \u00b6 We are currently offering free one-on-one help sessions via our GoToMeeting account. If you would like to take advantage of this opportunity \u2014 which probably won't last forever \u2014 just join our Slack and then direct message the WPLib Box project lead @mikeschinkel to schedule a session.","title":"Support"},{"location":"support.html#support-options-for-wplib-box","text":"Our goal is for WPlib Box to be your preferred choice for local WordPress development thus we actively want to support you . So please, do not be shy or worry you might be bothering us. Learning about your experience with WPLib Box will allow us to make WPLib Box that much better for you, and for everyone else.","title":"Support Options for WPLib Box"},{"location":"support.html#slack","text":"","title":"Slack"},{"location":"support.html#slack-for-urgent-help","text":"Please join our Slack to get help direct from our team in our #box channel.","title":"Slack for Urgent Help"},{"location":"support.html#also-slack-for-non-urgent-help","text":"And even if your needs are not urgent, we really do want to talk to you so we can learn how WPLib Box can better meet your needs.","title":"Also Slack for Non-urgent Help"},{"location":"support.html#documenting-issues-on-github","text":"After contacting us on Slack it is really helpful if you can submit a GitHub issue for any bugs or feature requests to ensure we can track them until they are addressed.","title":"Documenting Issues on GitHub"},{"location":"support.html#twitter-to-ask-simple-questions","text":"If you have a simple question or a feature request, please do not hesistate to tweet us at @wplib . You might also want to cc our project lead @mikeschinkel too.","title":"Twitter to Ask Simple Questions"},{"location":"support.html#one-on-one-gotomeeting-help","text":"We are currently offering free one-on-one help sessions via our GoToMeeting account. If you would like to take advantage of this opportunity \u2014 which probably won't last forever \u2014 just join our Slack and then direct message the WPLib Box project lead @mikeschinkel to schedule a session.","title":"One-on-One GoToMeeting Help"},{"location":"team.html","text":"The WPLib Box Team \u00b6","title":"Team"},{"location":"team.html#the-wplib-box-team","text":"","title":"The WPLib Box Team"},{"location":"temp.html","text":"Why is WPLib Box Caching Things? \u00b6 WPLib Box installs Redis for persistent object caching. To disable this simply rename www/content/object-cache.php to something like object-cache.disabled.php . But we do have plans to add numerous ways to do this. If you need to clear the cache the easiest way at the moment is to run vagrant reload from your development (host) computer. How do I Flush the Redis Persistent Object Cache? \u00b6 If you need to test with the persistent object cache, but you are running into the need to flush a corrupted cache you can simply run the following command from your host's command line: vagrant ssh redis-cli flushall exit Why is the Directory Layout used Not \"Standard?\" \u00b6 By default WPLib Box uses the WordPress Skeleton layout published by Mark Jaquith in 2011. We chose it because unlike the standard WordPress directory layout it is Composer -friendly which is almost a requirement these days for professional-level PHP development. But if you are not yet using Composer or don't feel you have the need for it you can you the \"Standard\" WordPress directory layout instead. See the three (3) simple approaches that follow in the next FAQ. Can I use the Standard WordPress Directory Layout? \u00b6 Absolutely. To be clear we assume you mean the directory layout that has the following subdirectories: /wp-admin/ /wp-content/ /wp-includes/ (Those directories are the exact layout you'll see in a download of WordPress from WordPress.org.) The Manual Approach \u00b6 To use the Standard WordPress directory layout open up Mac Finder or Windows Explorer and navigate to your project's /www directory (the project directory is the one containing Vagrantfile and the /scripts folder.) Then do the following: Delete the /www/wp/wp-content directory; you don't need it. (Uh, after checking you did not store anything in /www/wp/wp-content by accident. If you did, move it out then delete the directorty.) Move all the remaining files and directories up one level in the directort hierarchy; from /www/wp to /www . Rename /www/content to /www/wp-content Delete /www/wp In your IDE/text editor open www/index.php and then change the code from '/wp/wp-blog-header.php' to '/wp-blog-header.php' (e.g. remove the leading /wp from the filepath.) Rename /www/../composer.json to /www/../composer.json.save and delete /www/../composer.lock (since you can no longer use Composer with this directory layout structure. Note: composer.* is in the project root directory.) That's it, you are done! WPLib Box now in \"Standard\" WordPress directory layout. The Script Approach \u00b6 Or you can run this script, if you feel confident in doing so. First vagrant ssh to enter the box and then run the following commands: cd /var/www mv wp/*.* . mv wp/wp-admin/ . mv wp/wp-includes/ . mv content/ wp-content/ rm -rf wp/ sed -i \"s#/wp/wp-blog-header.php#/wp-blog-header.php#\" index.php The CLI Approach (Experimental) \u00b6 Or lastly you can try our experimental/alpha \"Inside-the-Box\" Box CLI . After you make sure you have the latest version of WPLib Box just run: vagrant ssh box set-directory-layout-standard Even better, if you want to switch back to \"Skeleton\" layout, we have a command for that too: vagrant ssh box set-directory-layout-skeleton","title":"Temp"},{"location":"temp.html#why-is-wplib-box-caching-things","text":"WPLib Box installs Redis for persistent object caching. To disable this simply rename www/content/object-cache.php to something like object-cache.disabled.php . But we do have plans to add numerous ways to do this. If you need to clear the cache the easiest way at the moment is to run vagrant reload from your development (host) computer.","title":"Why is WPLib Box Caching Things?"},{"location":"temp.html#how-do-i-flush-the-redis-persistent-object-cache","text":"If you need to test with the persistent object cache, but you are running into the need to flush a corrupted cache you can simply run the following command from your host's command line: vagrant ssh redis-cli flushall exit","title":"How do I Flush the Redis Persistent Object Cache?"},{"location":"temp.html#why-is-the-directory-layout-used-not-standard","text":"By default WPLib Box uses the WordPress Skeleton layout published by Mark Jaquith in 2011. We chose it because unlike the standard WordPress directory layout it is Composer -friendly which is almost a requirement these days for professional-level PHP development. But if you are not yet using Composer or don't feel you have the need for it you can you the \"Standard\" WordPress directory layout instead. See the three (3) simple approaches that follow in the next FAQ.","title":"Why is the Directory Layout used Not \"Standard?\""},{"location":"temp.html#can-i-use-the-standard-wordpress-directory-layout","text":"Absolutely. To be clear we assume you mean the directory layout that has the following subdirectories: /wp-admin/ /wp-content/ /wp-includes/ (Those directories are the exact layout you'll see in a download of WordPress from WordPress.org.)","title":"Can I use the Standard WordPress Directory Layout?"},{"location":"temp.html#the-manual-approach","text":"To use the Standard WordPress directory layout open up Mac Finder or Windows Explorer and navigate to your project's /www directory (the project directory is the one containing Vagrantfile and the /scripts folder.) Then do the following: Delete the /www/wp/wp-content directory; you don't need it. (Uh, after checking you did not store anything in /www/wp/wp-content by accident. If you did, move it out then delete the directorty.) Move all the remaining files and directories up one level in the directort hierarchy; from /www/wp to /www . Rename /www/content to /www/wp-content Delete /www/wp In your IDE/text editor open www/index.php and then change the code from '/wp/wp-blog-header.php' to '/wp-blog-header.php' (e.g. remove the leading /wp from the filepath.) Rename /www/../composer.json to /www/../composer.json.save and delete /www/../composer.lock (since you can no longer use Composer with this directory layout structure. Note: composer.* is in the project root directory.) That's it, you are done! WPLib Box now in \"Standard\" WordPress directory layout.","title":"The Manual Approach"},{"location":"temp.html#the-script-approach","text":"Or you can run this script, if you feel confident in doing so. First vagrant ssh to enter the box and then run the following commands: cd /var/www mv wp/*.* . mv wp/wp-admin/ . mv wp/wp-includes/ . mv content/ wp-content/ rm -rf wp/ sed -i \"s#/wp/wp-blog-header.php#/wp-blog-header.php#\" index.php","title":"The Script Approach"},{"location":"temp.html#the-cli-approach-experimental","text":"Or lastly you can try our experimental/alpha \"Inside-the-Box\" Box CLI . After you make sure you have the latest version of WPLib Box just run: vagrant ssh box set-directory-layout-standard Even better, if you want to switch back to \"Skeleton\" layout, we have a command for that too: vagrant ssh box set-directory-layout-skeleton","title":"The CLI Approach (Experimental)"},{"location":"troubleshooting.html","text":"NOT COMPLETE \u00b6 Troubleshooting WPLib Box \u00b6 Please Report the Issue on GitHub \u00b6 Even if you do find a solution, please report the issue... Even if you do find a solution please report the issue so we can either fix it or document it to make using WPLib Box easier for everyone. If your browser times out \u00b6 This in our most common issue If you have WPLib Box installed more than once for the same local domain name it will unfortunately not load. And as long as we are still using Vagrant this will continue to be a problem. Fortunately, we will be off Vagrant soon enough. If your browser times-out trying to load wplib.box check your hosts file to see if you have more than one IP address entry mapped to the wplib.box domain and its various subdomains. Trouble with VirtualBox \u00b6 If you have problems installing or running VirtualBox First, try Googling the error messages you get when trying to install. VirtualBox is independent of WPLib Box and thus you will often find solutions online. Problems with Vagrant \u00b6 If Vagrant is giving you trouble Try running vagrant up --debug to see if it can reveal any issues with your system that you are able to correct. You may want to redirect to a debug log so you can read the output in your text editor: vagrant up --debug > vagrant.log 2>&1 If you can't find the solution to your problem using the --debug switch please provide your vagrant.log via Slack or GitHub or email at team@wplib.org when requesting help. Nothing Here Solved Your Problem \u00b6 If you did not find your answer in any of the items listed If you do not find a solution, join our Slack to get help from our team in the #box channel. Don't be shy, we really do want to hear from you as it will help us make your experience with WPLib Box and everyone else's much better. If your problem is Vagrant-related \u2014 as most WPLib Box problems unfortunately often are \u2014 please provide your vagrant.log as described above in vagrant up is failing . (We will be so happy once we have eliminated the need for Vagrant. Soon!)","title":"Troubleshooting"},{"location":"troubleshooting.html#not-complete","text":"","title":"NOT COMPLETE"},{"location":"troubleshooting.html#troubleshooting-wplib-box","text":"","title":"Troubleshooting WPLib Box"},{"location":"troubleshooting.html#please-report-the-issue-on-github","text":"Even if you do find a solution, please report the issue... Even if you do find a solution please report the issue so we can either fix it or document it to make using WPLib Box easier for everyone.","title":"Please Report the Issue on GitHub"},{"location":"troubleshooting.html#if-your-browser-times-out","text":"This in our most common issue If you have WPLib Box installed more than once for the same local domain name it will unfortunately not load. And as long as we are still using Vagrant this will continue to be a problem. Fortunately, we will be off Vagrant soon enough. If your browser times-out trying to load wplib.box check your hosts file to see if you have more than one IP address entry mapped to the wplib.box domain and its various subdomains.","title":"If your browser times out"},{"location":"troubleshooting.html#trouble-with-virtualbox","text":"If you have problems installing or running VirtualBox First, try Googling the error messages you get when trying to install. VirtualBox is independent of WPLib Box and thus you will often find solutions online.","title":"Trouble with VirtualBox"},{"location":"troubleshooting.html#problems-with-vagrant","text":"If Vagrant is giving you trouble Try running vagrant up --debug to see if it can reveal any issues with your system that you are able to correct. You may want to redirect to a debug log so you can read the output in your text editor: vagrant up --debug > vagrant.log 2>&1 If you can't find the solution to your problem using the --debug switch please provide your vagrant.log via Slack or GitHub or email at team@wplib.org when requesting help.","title":"Problems with Vagrant"},{"location":"troubleshooting.html#nothing-here-solved-your-problem","text":"If you did not find your answer in any of the items listed If you do not find a solution, join our Slack to get help from our team in the #box channel. Don't be shy, we really do want to hear from you as it will help us make your experience with WPLib Box and everyone else's much better. If your problem is Vagrant-related \u2014 as most WPLib Box problems unfortunately often are \u2014 please provide your vagrant.log as described above in vagrant up is failing . (We will be so happy once we have eliminated the need for Vagrant. Soon!)","title":"Nothing Here Solved Your Problem"},{"location":"architecture/index.html","text":"Overview of WPLib Box Architecture \u00b6 While WPLib Box functionality is==tailored for the needs of working WordPress professionals==, WPLib Box's architecture was designed to be able to handle practically any web platform. Letu s take a look at the majors components of WPLib Box's architecture: Projects The project.json file Stacks Components Services Executables Scripts Source Data Media","title":"Overview"},{"location":"architecture/index.html#overview-of-wplib-box-architecture","text":"While WPLib Box functionality is==tailored for the needs of working WordPress professionals==, WPLib Box's architecture was designed to be able to handle practically any web platform. Letu s take a look at the majors components of WPLib Box's architecture: Projects The project.json file Stacks Components Services Executables Scripts Source Data Media","title":"Overview of WPLib Box Architecture"},{"location":"architecture/components.html","text":"NOT COMPLETE \u00b6 Components in WPLib Box \u00b6 \"Components\" provide the underlying functionality of WPLib Box. Components are collected together into an Project Stack to drive the Component Classes \u00b6 In general Components will fall into one or more of these classes: Service Containers : Service apllications running in Docker containers; i.e. web servers, database servers, process VMs (e.g. a PHP version), etc. Executable Containers : Compiled binaries running inside of a Docker container; i.e. Command-line versions of PHP, Python and Ruby as well tools like Git and SVN, etc. Scripts : Interpreted scripts executed by pairing with an executable container; i.e. Composer, PHPUnit, WP-CLI, PHP-CodeSniffer, etc. Source : Source code files; i.e. WordPress core, plugins, themes and PHP libraries as well as collections of those files we will call Blueprints. Data : Data files; i.e. MySQL dumps, XML files, JSON files, etc. Media : Media files; i.e. Image files, video files, PDF files, etc. Note The page describes our 1.0 vision for WPLib Box. Though not everything described below is implemented we plan to be feature-complete before 2019. Requirements \u00b6 Each component has a \"Named Type\" and each component must implement the \"Interface\" defined by its named type. Named Types \u00b6 Interfaces \u00b6 Components are a method to add additional functionality to WPLib Box. These packages can include anything, and any user can create a package. Current Component Types \u00b6 All of the following Component Types are implemented via a Docker Container and supplied - container/webserver - An HTTP Web Server that runs on Linux that provides sufficient features to serve WordPress websites, such as Nginx. - container/dbserver - A MySQL-compatible Database Server that runs on Linux that can serve databases for WordPress websites - container/kvstore - A Key-Value Store typically used for persistent object caches in WordPress, such as Redis or Memcached - container/processvm - A PHP-style language engine used to execute WordPress source code. Currently Supported Components \u00b6 WPLib Box can currently compose an operating \"stack\" from the following Components (the first one listed in each category is the default component ) when you first install WPLib Box: Category Default Component Also Available \"Component Type\" Notes Web Server Nginx Apache and Caddy container/webserver DB Server MySql MariaDB container/dbserver Cache Server Redis memcached container/cacheserver Process VM PHP 7.0 PHP 7.1 and PHP 5.6 container/processvm PHP 7.0 and 5.6 are (currently) implemented in Docker containers but PHP 7.1 has been installed directly to Linux while we wait for an official Docker PHP 7.1 container. Disclaimer: Currently all except Caddy and container/webserver are not actually implemented as components, but instead installed directly. However it is our intention to convert them all to components in the near future. How Components Work \u00b6 Components are listed in the project.json file for each project that uses WPLib Box. In this JSON file is a list of services that will get automatically configured and made to run whenever vagrant up is run. Vagrant delegates to box startup which it runs inside in the Linux box (specifically this script does not run in the Windows or macOS host computer, it runs via SSH tunnelling in WPLib Box.) If WPLib Box does not find that the component has been previously installed in the current WPLib Box it reaches out to the Internet and downloads and installs the component, and then ensures that it is running for the current project. This approach allows easy stack sharing during development among team members on multi-developer project , and it makes it easy for individual developers to pick of a prior project without having the spend time recreating the previously used development environment. Note that we expect the exact details of how components work will to evolve significantly before we reach version 1.0 so we'll wait until things settle down before document them in detail. Anatomy of a Docker Container Component. \u00b6 component.json - A file at the root level of the repository that defines the component package. commands directory - This subdirectory contains commands that can be executed by the guest CLI. README.md (optional) - This should detail how to install the package and the CLI commands made available. component.json Contents \u00b6 This file is simply a collection of JSON objects that define the package. JSON Object Properties \u00b6 Property Name Description name This is the name of the component. This should be in human readable form, e.g. My Super Cool Component . version The component version. This should following Semantic Version rules, e.g. 0.1.0 . type Each package has both a major and minor type. The major type defines the role the component plays in the box, ( e.g. webserver ) . The minor type is the implementation of the component, ( e.g. container for a Docker container ) . Currently, only Docker container minor type is supported. download This is the source repository of the component, ( e.g. wplib/my-super-cool-component ) . Currently, only GitHub repositories are supported. containername This is the name to use for the Docker container. It MUST be unique, ( e.g. mysupercoolcontainer ) . website This is the URL for the component. This could be either the GitHub repository, or a link to a site or page dedicated to information about the component package. contains This a JSON object with the following property/value pairs: type , version , and website . If you were to create a component for ElasticSearch, this object might be as follows: contains:{ \"type\": \"service/linux\", \"version\": \"5.4.0\", \"website\": \"https://github.com/elastic/elasticsearch\" } Container Hosting \u00b6 The Docker containers used by our components are hosted at the WPLib account on Docker Hub .","title":"Components"},{"location":"architecture/components.html#not-complete","text":"","title":"NOT COMPLETE"},{"location":"architecture/components.html#components-in-wplib-box","text":"\"Components\" provide the underlying functionality of WPLib Box. Components are collected together into an Project Stack to drive the","title":"Components in WPLib Box"},{"location":"architecture/components.html#component-classes","text":"In general Components will fall into one or more of these classes: Service Containers : Service apllications running in Docker containers; i.e. web servers, database servers, process VMs (e.g. a PHP version), etc. Executable Containers : Compiled binaries running inside of a Docker container; i.e. Command-line versions of PHP, Python and Ruby as well tools like Git and SVN, etc. Scripts : Interpreted scripts executed by pairing with an executable container; i.e. Composer, PHPUnit, WP-CLI, PHP-CodeSniffer, etc. Source : Source code files; i.e. WordPress core, plugins, themes and PHP libraries as well as collections of those files we will call Blueprints. Data : Data files; i.e. MySQL dumps, XML files, JSON files, etc. Media : Media files; i.e. Image files, video files, PDF files, etc. Note The page describes our 1.0 vision for WPLib Box. Though not everything described below is implemented we plan to be feature-complete before 2019.","title":"Component Classes"},{"location":"architecture/components.html#requirements","text":"Each component has a \"Named Type\" and each component must implement the \"Interface\" defined by its named type.","title":"Requirements"},{"location":"architecture/components.html#named-types","text":"","title":"Named Types"},{"location":"architecture/components.html#interfaces","text":"Components are a method to add additional functionality to WPLib Box. These packages can include anything, and any user can create a package.","title":"Interfaces"},{"location":"architecture/components.html#current-component-types","text":"All of the following Component Types are implemented via a Docker Container and supplied - container/webserver - An HTTP Web Server that runs on Linux that provides sufficient features to serve WordPress websites, such as Nginx. - container/dbserver - A MySQL-compatible Database Server that runs on Linux that can serve databases for WordPress websites - container/kvstore - A Key-Value Store typically used for persistent object caches in WordPress, such as Redis or Memcached - container/processvm - A PHP-style language engine used to execute WordPress source code.","title":"Current Component Types"},{"location":"architecture/components.html#currently-supported-components","text":"WPLib Box can currently compose an operating \"stack\" from the following Components (the first one listed in each category is the default component ) when you first install WPLib Box: Category Default Component Also Available \"Component Type\" Notes Web Server Nginx Apache and Caddy container/webserver DB Server MySql MariaDB container/dbserver Cache Server Redis memcached container/cacheserver Process VM PHP 7.0 PHP 7.1 and PHP 5.6 container/processvm PHP 7.0 and 5.6 are (currently) implemented in Docker containers but PHP 7.1 has been installed directly to Linux while we wait for an official Docker PHP 7.1 container. Disclaimer: Currently all except Caddy and container/webserver are not actually implemented as components, but instead installed directly. However it is our intention to convert them all to components in the near future.","title":"Currently Supported Components"},{"location":"architecture/components.html#how-components-work","text":"Components are listed in the project.json file for each project that uses WPLib Box. In this JSON file is a list of services that will get automatically configured and made to run whenever vagrant up is run. Vagrant delegates to box startup which it runs inside in the Linux box (specifically this script does not run in the Windows or macOS host computer, it runs via SSH tunnelling in WPLib Box.) If WPLib Box does not find that the component has been previously installed in the current WPLib Box it reaches out to the Internet and downloads and installs the component, and then ensures that it is running for the current project. This approach allows easy stack sharing during development among team members on multi-developer project , and it makes it easy for individual developers to pick of a prior project without having the spend time recreating the previously used development environment. Note that we expect the exact details of how components work will to evolve significantly before we reach version 1.0 so we'll wait until things settle down before document them in detail.","title":"How Components Work"},{"location":"architecture/components.html#anatomy-of-a-docker-container-component","text":"component.json - A file at the root level of the repository that defines the component package. commands directory - This subdirectory contains commands that can be executed by the guest CLI. README.md (optional) - This should detail how to install the package and the CLI commands made available.","title":"Anatomy of a Docker Container Component."},{"location":"architecture/components.html#componentjson-contents","text":"This file is simply a collection of JSON objects that define the package.","title":"component.json Contents"},{"location":"architecture/components.html#json-object-properties","text":"Property Name Description name This is the name of the component. This should be in human readable form, e.g. My Super Cool Component . version The component version. This should following Semantic Version rules, e.g. 0.1.0 . type Each package has both a major and minor type. The major type defines the role the component plays in the box, ( e.g. webserver ) . The minor type is the implementation of the component, ( e.g. container for a Docker container ) . Currently, only Docker container minor type is supported. download This is the source repository of the component, ( e.g. wplib/my-super-cool-component ) . Currently, only GitHub repositories are supported. containername This is the name to use for the Docker container. It MUST be unique, ( e.g. mysupercoolcontainer ) . website This is the URL for the component. This could be either the GitHub repository, or a link to a site or page dedicated to information about the component package. contains This a JSON object with the following property/value pairs: type , version , and website . If you were to create a component for ElasticSearch, this object might be as follows: contains:{ \"type\": \"service/linux\", \"version\": \"5.4.0\", \"website\": \"https://github.com/elastic/elasticsearch\" }","title":"JSON Object Properties"},{"location":"architecture/components.html#container-hosting","text":"The Docker containers used by our components are hosted at the WPLib account on Docker Hub .","title":"Container Hosting"},{"location":"architecture/stacks.html","text":"Stacks in WPLib Box \u00b6 \"Stacks\" empower practically all functionality found in In WPLib Box. A WPLib Box stack is a collection of versioned Components that together implement WPLib Box's functionality. It is these Stacks and these Components that provide unmatched power and flexibility. Named Stacks \u00b6 In WPLib Box there is the concept of \" Named Stack \" . A Named Stack specifies a list of Components Types that are either required or optional to support the software the stack is designed for. And, no surprise, the default Named Stack for WPLib Box is the \"wordpress\" stack. You were expecting something else? If you are familiar with object-oriented programming in PHP a Named Stack is like a \"class\" and the Project Stacks described next are similar to \"instances\" of that class. Project Stacks \u00b6 Each \" Project \" gets a \" Project Stack \" comprised of the Component Types needed by the project. The list of components is derived from at least one Named Stack \u2014 like \"wordpress\" \u2014 and should include all the Named Stack's required components, any of its optional components and potentially some general purpose components. The Project Stack can also include components from other Named Stacks, assuming the components are not mutually exclusive. The \"WordPress\" Stack \u00b6 The WordPress stack is comprised of the following component types: Component Type Required Examples \"wordpress/webserver\" Yes Apache or Nginx \"wordpress/dbserver\" Yes MySQL or MariaDB \"wordpress/processvm\" Yes PHP \"wordpress/core\" Yes WordPress core source \"wordpress/cacheserver\" No Memcached or Redis \"wordpress/cliapp\" No WP CLI The \"WordPress\" Stack in project.json form: \u00b6 The following is how 0.17.0 currently implements the WordPress stack { \"stack\" : { \"wordpress/dbserver\": \"wplib/mysql:5.5.60\", \"wordpress/webserver\": \"wplib/nginx:1.14.0\", \"wordpress/processvm\": \"wplib/php:7.1.18\", \"wordpress/cacheserver\": \"wplib/redis:4.0.9\", \"wordpress/cliapp\": \"wplib/wp-cli:1.5.1\" } } Theory and practice do not yet align in 0.17.0 Savvy readers will note that \"wordpress/core\" has yet to be implemented via the project.json loader as of 0.17.0 . That, of course, is coming soon. The \"LxMP\" Stack \u00b6 In addition to the WordPress stack WPLib Box has the more generic LxMP stack, which is basically what is well-known as the LAMP/LEMP stack. The LxMP stack is comprised of the following component types: Component Type Required Examples \"lxmp/webserver\" Yes Apache or Nginx \"lxmp/dbserver\" Yes MySQL or MariaDB \"lxmp/processvm\" Yes PHP WPLib Box's WordPress stack actually inherits from and extends the LxMP stack. Build-Your-Own Stack! \u00b6 While we are definitely targeted WordPress professionals we deliberately chose to architect the core of WPLib Box was to be completely neutral with respect to web CMS and/or web framework. Everything about the vision for WPLib Box is that its support for WordPress is implemented using features that anyone else can use to add support for another CMS or another framework. So, if you are a champion for another CMS or another web framework and would like us to teach you how to build the components needed to support your favorite web solution, please reach out to us via our Slack .","title":"Stacks"},{"location":"architecture/stacks.html#stacks-in-wplib-box","text":"\"Stacks\" empower practically all functionality found in In WPLib Box. A WPLib Box stack is a collection of versioned Components that together implement WPLib Box's functionality. It is these Stacks and these Components that provide unmatched power and flexibility.","title":"Stacks in WPLib Box"},{"location":"architecture/stacks.html#named-stacks","text":"In WPLib Box there is the concept of \" Named Stack \" . A Named Stack specifies a list of Components Types that are either required or optional to support the software the stack is designed for. And, no surprise, the default Named Stack for WPLib Box is the \"wordpress\" stack. You were expecting something else? If you are familiar with object-oriented programming in PHP a Named Stack is like a \"class\" and the Project Stacks described next are similar to \"instances\" of that class.","title":"Named Stacks"},{"location":"architecture/stacks.html#project-stacks","text":"Each \" Project \" gets a \" Project Stack \" comprised of the Component Types needed by the project. The list of components is derived from at least one Named Stack \u2014 like \"wordpress\" \u2014 and should include all the Named Stack's required components, any of its optional components and potentially some general purpose components. The Project Stack can also include components from other Named Stacks, assuming the components are not mutually exclusive.","title":"Project Stacks"},{"location":"architecture/stacks.html#the-wordpress-stack","text":"The WordPress stack is comprised of the following component types: Component Type Required Examples \"wordpress/webserver\" Yes Apache or Nginx \"wordpress/dbserver\" Yes MySQL or MariaDB \"wordpress/processvm\" Yes PHP \"wordpress/core\" Yes WordPress core source \"wordpress/cacheserver\" No Memcached or Redis \"wordpress/cliapp\" No WP CLI","title":"The \"WordPress\" Stack"},{"location":"architecture/stacks.html#the-wordpress-stack-in-projectjson-form","text":"The following is how 0.17.0 currently implements the WordPress stack { \"stack\" : { \"wordpress/dbserver\": \"wplib/mysql:5.5.60\", \"wordpress/webserver\": \"wplib/nginx:1.14.0\", \"wordpress/processvm\": \"wplib/php:7.1.18\", \"wordpress/cacheserver\": \"wplib/redis:4.0.9\", \"wordpress/cliapp\": \"wplib/wp-cli:1.5.1\" } } Theory and practice do not yet align in 0.17.0 Savvy readers will note that \"wordpress/core\" has yet to be implemented via the project.json loader as of 0.17.0 . That, of course, is coming soon.","title":"The \"WordPress\" Stack in project.json form:"},{"location":"architecture/stacks.html#the-lxmp-stack","text":"In addition to the WordPress stack WPLib Box has the more generic LxMP stack, which is basically what is well-known as the LAMP/LEMP stack. The LxMP stack is comprised of the following component types: Component Type Required Examples \"lxmp/webserver\" Yes Apache or Nginx \"lxmp/dbserver\" Yes MySQL or MariaDB \"lxmp/processvm\" Yes PHP WPLib Box's WordPress stack actually inherits from and extends the LxMP stack.","title":"The \"LxMP\" Stack"},{"location":"architecture/stacks.html#build-your-own-stack","text":"While we are definitely targeted WordPress professionals we deliberately chose to architect the core of WPLib Box was to be completely neutral with respect to web CMS and/or web framework. Everything about the vision for WPLib Box is that its support for WordPress is implemented using features that anyone else can use to add support for another CMS or another framework. So, if you are a champion for another CMS or another web framework and would like us to teach you how to build the components needed to support your favorite web solution, please reach out to us via our Slack .","title":"Build-Your-Own Stack!"},{"location":"architecture/projects/index.html","text":"WPLib Box's Concept of \"Projects\" \u00b6","title":"Overview"},{"location":"architecture/projects/index.html#wplib-boxs-concept-of-projects","text":"","title":"WPLib Box's Concept of \"Projects\""},{"location":"architecture/projects/project.json.html","text":"NOT FINISHED \u00b6 project.json \u00b6 The current version of WPLib Box is configured using a project-specific project.json file which you can find in the root of your project directory. The default value for project.json for version 0.17.0 is: { \"stack\" : { \"wordpress/dbserver\": \"wplib/mysql:5.5.60\", \"wordpress/webserver\": \"wplib/nginx:1.14.0\", \"wordpress/processvm\": \"wplib/php:7.1.18\", \"wordpress/cacheserver\": \"wplib/redis:4.0.9\", \"mkdocs/webserver\": \"wplib/mkdocs:0.15.3\", \"box/mailsender\": \"wplib/mailhog:1.0.0\", \"box/webproxy\": \"wplib/proxy:1.14.0\", \"box/sqladmin\": \"wplib/adminer:4.6.2\" } }","title":"project.json"},{"location":"architecture/projects/project.json.html#not-finished","text":"","title":"NOT FINISHED"},{"location":"architecture/projects/project.json.html#projectjson","text":"The current version of WPLib Box is configured using a project-specific project.json file which you can find in the root of your project directory. The default value for project.json for version 0.17.0 is: { \"stack\" : { \"wordpress/dbserver\": \"wplib/mysql:5.5.60\", \"wordpress/webserver\": \"wplib/nginx:1.14.0\", \"wordpress/processvm\": \"wplib/php:7.1.18\", \"wordpress/cacheserver\": \"wplib/redis:4.0.9\", \"mkdocs/webserver\": \"wplib/mkdocs:0.15.3\", \"box/mailsender\": \"wplib/mailhog:1.0.0\", \"box/webproxy\": \"wplib/proxy:1.14.0\", \"box/sqladmin\": \"wplib/adminer:4.6.2\" } }","title":"project.json"},{"location":"components/index.html","text":"The Components of WPLib Box \u00b6 Here we document the various Components available to you as a WPLib Box user. To instead learn about Components in WPLib Box's architecture, click here .","title":"Overview"},{"location":"components/index.html#the-components-of-wplib-box","text":"Here we document the various Components available to you as a WPLib Box user. To instead learn about Components in WPLib Box's architecture, click here .","title":"The Components of WPLib Box"},{"location":"download/index.html","text":"Click here to download WPLib Box. \u00b6 After downloading, visit our Quick Start to get started using WPLib Box.","title":"Downloading"},{"location":"download/index.html#click-here-to-download-wplib-box","text":"After downloading, visit our Quick Start to get started using WPLib Box.","title":"Click here to download WPLib Box."},{"location":"github/index.html","text":"Github Repos for WPLib Box \u00b6 The following are the GitHub repositories that collectively contribute to the software platform that is WPLib Box at the time 1 of this writing. Primary Repositories \u00b6 wplib/wplib-box \u00b6 This is the main repository for WPLib Box from which the releases are generated and the issues and feature requests are tracked. wplib/box-support \u00b6 Contains the WPLib Box Support plugin that provides, among other things, password-free login 2 to the WordPress admin. wplib/box-welcome \u00b6 Contains the WPLib Box Welcome theme which is an entry point for new users of WPLib Box. In future versions it will be replaced by a desktop admin console for configuring the box. wplib/box-scripts \u00b6 Contains the Bash-based command line tool for managing WPLib Box after running vagrant ssh to enter into the Linux-based of WPLib Box. In future versions this will be replaced with a Go-based command line utility . wplib/box-docs \u00b6 Contains the Markdown source for this MkDocs-generated set of documentation. wplib/box-installer \u00b6 In the near future \u2014 once we convert WPlib Box to a fully multi-project box \u2014 this repository will contain .exe and .pkg installers for Windows and Mac, respectively. wplib/box-cli \u00b6 In the near future this repository will contain Go source code for the future command line utility for managing WPLib Box. wplib/box-api \u00b6 In the near future this repository will contain Go source code for the REST API that will allow WPLib Box to be fully automated using RESTful API calls. wplib/box-admin \u00b6 In the near future this repository will contain the source code for an Electron-based desktop app that will allow non-technical end-users to manage and configure WPLib Box. wplib/website \u00b6 Contains this source code for our primary website wplib.org , but not for wplib.org/box/ which is contained in the wplib/box-docs repository. wplib/logos \u00b6 The offical logos for WPLib Box. Docker Containers Repos \u00b6 Box-global Components \u00b6 Service Containers \u00b6 wplib/proxy-docker \u00b6 wplib/maihog-docker \u00b6 wplib/adminer-docker \u00b6 Project-specific Components \u00b6 Service Containers \u00b6 wplib/php-docker \u00b6 wplib/nginx-docker \u00b6 wplib/apache-docker \u00b6 wplib/mysql-docker \u00b6 wplib/mariadb-docker \u00b6 wplib/redis-docker \u00b6 wplib/memcached-docker \u00b6 wplib/mkdocs-docker \u00b6 Executable Containers \u00b6 wplib/php-docker \u00b6 wplib/composer-docker \u00b6 wplib/wp-cli-docker \u00b6 wplib/wordpress-docker \u00b6 Potential Containers \u00b6 wplib/caddy-docker \u00b6 wplib/dns-docker \u00b6 Deprecated Repositories \u00b6 wplib/php-fpm-docker \u00b6 wplib/apache2-docker \u00b6 wplib/caddy-package \u00b6 wplib/box-cli2 \u00b6 wplib/ERROR-CODES \u00b6 Last updated 2018-07-07. \u21a9 Password-free login only works when running locally within WPLib Box, unless otherwise configured by hooks. \u21a9","title":"Overview"},{"location":"github/index.html#github-repos-for-wplib-box","text":"The following are the GitHub repositories that collectively contribute to the software platform that is WPLib Box at the time 1 of this writing.","title":"Github Repos for WPLib Box"},{"location":"github/index.html#primary-repositories","text":"","title":"Primary Repositories"},{"location":"github/index.html#wplibwplib-box","text":"This is the main repository for WPLib Box from which the releases are generated and the issues and feature requests are tracked.","title":"wplib/wplib-box"},{"location":"github/index.html#wplibbox-support","text":"Contains the WPLib Box Support plugin that provides, among other things, password-free login 2 to the WordPress admin.","title":"wplib/box-support"},{"location":"github/index.html#wplibbox-welcome","text":"Contains the WPLib Box Welcome theme which is an entry point for new users of WPLib Box. In future versions it will be replaced by a desktop admin console for configuring the box.","title":"wplib/box-welcome"},{"location":"github/index.html#wplibbox-scripts","text":"Contains the Bash-based command line tool for managing WPLib Box after running vagrant ssh to enter into the Linux-based of WPLib Box. In future versions this will be replaced with a Go-based command line utility .","title":"wplib/box-scripts"},{"location":"github/index.html#wplibbox-docs","text":"Contains the Markdown source for this MkDocs-generated set of documentation.","title":"wplib/box-docs"},{"location":"github/index.html#wplibbox-installer","text":"In the near future \u2014 once we convert WPlib Box to a fully multi-project box \u2014 this repository will contain .exe and .pkg installers for Windows and Mac, respectively.","title":"wplib/box-installer"},{"location":"github/index.html#wplibbox-cli","text":"In the near future this repository will contain Go source code for the future command line utility for managing WPLib Box.","title":"wplib/box-cli"},{"location":"github/index.html#wplibbox-api","text":"In the near future this repository will contain Go source code for the REST API that will allow WPLib Box to be fully automated using RESTful API calls.","title":"wplib/box-api"},{"location":"github/index.html#wplibbox-admin","text":"In the near future this repository will contain the source code for an Electron-based desktop app that will allow non-technical end-users to manage and configure WPLib Box.","title":"wplib/box-admin"},{"location":"github/index.html#wplibwebsite","text":"Contains this source code for our primary website wplib.org , but not for wplib.org/box/ which is contained in the wplib/box-docs repository.","title":"wplib/website"},{"location":"github/index.html#wpliblogos","text":"The offical logos for WPLib Box.","title":"wplib/logos"},{"location":"github/index.html#docker-containers-repos","text":"","title":"Docker Containers Repos"},{"location":"github/index.html#box-global-components","text":"","title":"Box-global Components"},{"location":"github/index.html#service-containers","text":"","title":"Service Containers"},{"location":"github/index.html#wplibproxy-docker","text":"","title":"wplib/proxy-docker"},{"location":"github/index.html#wplibmaihog-docker","text":"","title":"wplib/maihog-docker"},{"location":"github/index.html#wplibadminer-docker","text":"","title":"wplib/adminer-docker"},{"location":"github/index.html#project-specific-components","text":"","title":"Project-specific Components"},{"location":"github/index.html#service-containers_1","text":"","title":"Service Containers"},{"location":"github/index.html#wplibphp-docker","text":"","title":"wplib/php-docker"},{"location":"github/index.html#wplibnginx-docker","text":"","title":"wplib/nginx-docker"},{"location":"github/index.html#wplibapache-docker","text":"","title":"wplib/apache-docker"},{"location":"github/index.html#wplibmysql-docker","text":"","title":"wplib/mysql-docker"},{"location":"github/index.html#wplibmariadb-docker","text":"","title":"wplib/mariadb-docker"},{"location":"github/index.html#wplibredis-docker","text":"","title":"wplib/redis-docker"},{"location":"github/index.html#wplibmemcached-docker","text":"","title":"wplib/memcached-docker"},{"location":"github/index.html#wplibmkdocs-docker","text":"","title":"wplib/mkdocs-docker"},{"location":"github/index.html#executable-containers","text":"","title":"Executable Containers"},{"location":"github/index.html#wplibphp-docker_1","text":"","title":"wplib/php-docker"},{"location":"github/index.html#wplibcomposer-docker","text":"","title":"wplib/composer-docker"},{"location":"github/index.html#wplibwp-cli-docker","text":"","title":"wplib/wp-cli-docker"},{"location":"github/index.html#wplibwordpress-docker","text":"","title":"wplib/wordpress-docker"},{"location":"github/index.html#potential-containers","text":"","title":"Potential Containers"},{"location":"github/index.html#wplibcaddy-docker","text":"","title":"wplib/caddy-docker"},{"location":"github/index.html#wplibdns-docker","text":"","title":"wplib/dns-docker"},{"location":"github/index.html#deprecated-repositories","text":"","title":"Deprecated Repositories"},{"location":"github/index.html#wplibphp-fpm-docker","text":"","title":"wplib/php-fpm-docker"},{"location":"github/index.html#wplibapache2-docker","text":"","title":"wplib/apache2-docker"},{"location":"github/index.html#wplibcaddy-package","text":"","title":"wplib/caddy-package"},{"location":"github/index.html#wplibbox-cli2","text":"","title":"wplib/box-cli2"},{"location":"github/index.html#wpliberror-codes","text":"Last updated 2018-07-07. \u21a9 Password-free login only works when running locally within WPLib Box, unless otherwise configured by hooks. \u21a9","title":"wplib/ERROR-CODES"},{"location":"how-to/index.html","text":"NOT FINISHED \u00b6 Using Aspects of WPLib Box \u00b6 WPLib Box provides the following features that you can configure and/or control: Common Use-cases \u00b6 These are what we have learned seem to be the most common needs for new users of WPLib Box: Change web server \u2014 Apache, Nginx, etc. Change database server \u2014 MySQL, MariaDB, etc. Change PHP version \u2014 5.2.4 through 7.2 Cache Servers **: \u2014 Several version of Memcached and Redis MkDocs Serve **: \u2014 Serving Markdown source with dynamic translation to HTML+CSS. WPLib Box's Command Line Tool \u00b6 Box Other Command Line Tools \u00b6 Composer WP CLI Phar MkDocs Build **: \u2014 Generating static HTML+CSS documentation from Markdown source.","title":"Overview"},{"location":"how-to/index.html#not-finished","text":"","title":"NOT FINISHED"},{"location":"how-to/index.html#using-aspects-of-wplib-box","text":"WPLib Box provides the following features that you can configure and/or control:","title":"Using Aspects of WPLib Box"},{"location":"how-to/index.html#common-use-cases","text":"These are what we have learned seem to be the most common needs for new users of WPLib Box: Change web server \u2014 Apache, Nginx, etc. Change database server \u2014 MySQL, MariaDB, etc. Change PHP version \u2014 5.2.4 through 7.2 Cache Servers **: \u2014 Several version of Memcached and Redis MkDocs Serve **: \u2014 Serving Markdown source with dynamic translation to HTML+CSS.","title":"Common Use-cases"},{"location":"how-to/index.html#wplib-boxs-command-line-tool","text":"Box","title":"WPLib Box's Command Line Tool"},{"location":"how-to/index.html#other-command-line-tools","text":"Composer WP CLI Phar MkDocs Build **: \u2014 Generating static HTML+CSS documentation from Markdown source.","title":"Other Command Line Tools"},{"location":"how-to/box-command.html","text":"NOT FINISHED \u00b6 The box command \u00b6 To use the box command you will need to 1 vagrant SSH into WPLib Box. We plan to offer an updated version of the box command in the near future that will run on your host computer . \u21a9","title":"Box CLI"},{"location":"how-to/box-command.html#not-finished","text":"","title":"NOT FINISHED"},{"location":"how-to/box-command.html#the-box-command","text":"To use the box command you will need to 1 vagrant SSH into WPLib Box. We plan to offer an updated version of the box command in the near future that will run on your host computer . \u21a9","title":"The box command"},{"location":"how-to/composer.html","text":"Using Composer with WPLib Box \u00b6 While you certainly can install Composer on your host computer and use it with your WPLib Box project, hopefully you won't have to as we've implemented Composer within of WPLib Box . Bug Unfortunately Composer is broken in 0.17.0 due to our changing the default username for WPLib Box but not changing in the Composer container. This should be fixed soon in 0.17.1 . Using Composer \u00b6 Composer is installed in the WPLib Box virtual machine so to use it you first SSH into WPLib Box and then run your Composer command, for example: vagrant ssh composer install Implementation \u00b6 Our implementation of Composer follows WPLib Box's philosophy of containerization and is thus implemented with our own Docker container . Our composer command is itself is a Bash script which is designed to invoke the Composer container and that script can be found at /opt/box/bin/composer after you vagrant ssh into WPLib Box. Current Limitations \u00b6 Some commands may have issues. If you find this to be the case please contact our support to let us know so we can address sooner than later.","title":"Composer"},{"location":"how-to/composer.html#using-composer-with-wplib-box","text":"While you certainly can install Composer on your host computer and use it with your WPLib Box project, hopefully you won't have to as we've implemented Composer within of WPLib Box . Bug Unfortunately Composer is broken in 0.17.0 due to our changing the default username for WPLib Box but not changing in the Composer container. This should be fixed soon in 0.17.1 .","title":"Using Composer with WPLib Box"},{"location":"how-to/composer.html#using-composer","text":"Composer is installed in the WPLib Box virtual machine so to use it you first SSH into WPLib Box and then run your Composer command, for example: vagrant ssh composer install","title":"Using Composer"},{"location":"how-to/composer.html#implementation","text":"Our implementation of Composer follows WPLib Box's philosophy of containerization and is thus implemented with our own Docker container . Our composer command is itself is a Bash script which is designed to invoke the Composer container and that script can be found at /opt/box/bin/composer after you vagrant ssh into WPLib Box.","title":"Implementation"},{"location":"how-to/composer.html#current-limitations","text":"Some commands may have issues. If you find this to be the case please contact our support to let us know so we can address sooner than later.","title":"Current Limitations"},{"location":"how-to/mkdocs.html","text":"NOT FINISHED \u00b6 https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#images https://github.com/Python-Markdown/markdown/wiki/Third-Party-Extensions Using MkDocs with WPLib Box \u00b6 While you certainly can install MkDocs on your host computer and use it with your WPLib Box project, hopefully you won't have to as we've implemented MkDocs within of WPLib Box . Using MkDocs \u00b6 MkDocs allows you to both dynamically serve documentation from Markdown files while you are writing your docs (just like you can dynamically serve PHP files from your web server) , and then MkDocs allows you to build a static website from those Markdown files for hosting your docs on your web server. Dynamically Serving Markdown \u00b6 WPLib Box automatically serves the Markdown files contained in your project's /mkdocs directory to docs.wplib.box in your browser (or to whatever docs. subdomain is created by Vagrantfile when you add your own domain name in the HOSTNAME file.) Write docs in Markdown \u00b6 MkDocs allows you to write rich documentation in Markdown \u2014 great for documenting reusable plugins and themes \u2014 that you can then version control! and view using the MkDocs built-in server which WPLib Box automatically configures to serve from your project's '`/mkdocs in a root or subdirectory of your web server containing the HTML, CSS and images that comprise a static copy of your documentation. reads the /mkdocs.yaml file which you can learn how to configure here . If you use our chosen default material theme you can also learn to configure via customizations , extensions and a cheatsheet . Generating \u00b6 so to use it you first SSH into WPLib Box and then run your MkDocs command, for example: vagrant ssh MkDocs install Implementation \u00b6 Our implementation of MkDocs follows WPLib Box's philosophy of containerization and is thus implemented with our own Docker container . Our MkDocs command is itself is a Bash script which is designed to invoke the MkDocs container and that script can be found at /opt/box/bin/mkdocs after you vagrant ssh into WPLib Box. Current Limitations \u00b6 Running mkdocs almost always starts mkdocs serve which is not particularly useful, especially if you are trying to run mkdocs --version or similar. We plan to fix this very soon . Some commands may have issues. If you find this to be the case please contact our support to let us know so we can address sooner than later.","title":"MkDocs"},{"location":"how-to/mkdocs.html#not-finished","text":"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#images https://github.com/Python-Markdown/markdown/wiki/Third-Party-Extensions","title":"NOT FINISHED"},{"location":"how-to/mkdocs.html#using-mkdocs-with-wplib-box","text":"While you certainly can install MkDocs on your host computer and use it with your WPLib Box project, hopefully you won't have to as we've implemented MkDocs within of WPLib Box .","title":"Using MkDocs with WPLib Box"},{"location":"how-to/mkdocs.html#using-mkdocs","text":"MkDocs allows you to both dynamically serve documentation from Markdown files while you are writing your docs (just like you can dynamically serve PHP files from your web server) , and then MkDocs allows you to build a static website from those Markdown files for hosting your docs on your web server.","title":"Using MkDocs"},{"location":"how-to/mkdocs.html#dynamically-serving-markdown","text":"WPLib Box automatically serves the Markdown files contained in your project's /mkdocs directory to docs.wplib.box in your browser (or to whatever docs. subdomain is created by Vagrantfile when you add your own domain name in the HOSTNAME file.)","title":"Dynamically Serving Markdown"},{"location":"how-to/mkdocs.html#write-docs-in-markdown","text":"MkDocs allows you to write rich documentation in Markdown \u2014 great for documenting reusable plugins and themes \u2014 that you can then version control! and view using the MkDocs built-in server which WPLib Box automatically configures to serve from your project's '`/mkdocs in a root or subdirectory of your web server containing the HTML, CSS and images that comprise a static copy of your documentation. reads the /mkdocs.yaml file which you can learn how to configure here . If you use our chosen default material theme you can also learn to configure via customizations , extensions and a cheatsheet .","title":"Write docs in Markdown"},{"location":"how-to/mkdocs.html#generating","text":"so to use it you first SSH into WPLib Box and then run your MkDocs command, for example: vagrant ssh MkDocs install","title":"Generating"},{"location":"how-to/mkdocs.html#implementation","text":"Our implementation of MkDocs follows WPLib Box's philosophy of containerization and is thus implemented with our own Docker container . Our MkDocs command is itself is a Bash script which is designed to invoke the MkDocs container and that script can be found at /opt/box/bin/mkdocs after you vagrant ssh into WPLib Box.","title":"Implementation"},{"location":"how-to/mkdocs.html#current-limitations","text":"Running mkdocs almost always starts mkdocs serve which is not particularly useful, especially if you are trying to run mkdocs --version or similar. We plan to fix this very soon . Some commands may have issues. If you find this to be the case please contact our support to let us know so we can address sooner than later.","title":"Current Limitations"},{"location":"how-to/processvm.html","text":"Changing your WPLib Box's PHP version \u00b6","title":"PHP"},{"location":"how-to/processvm.html#changing-your-wplib-boxs-php-version","text":"","title":"Changing your WPLib Box's PHP version"},{"location":"how-to/servers.html","text":"Configuring WPLib Box's Various Servers \u00b6 Web Servers \u00b6 Database Servers \u00b6 Cache Servers \u00b6 Doc Server \u00b6 For more about our only documenation server visit the MkDocs page.","title":"Servers"},{"location":"how-to/servers.html#configuring-wplib-boxs-various-servers","text":"","title":"Configuring WPLib Box's Various Servers"},{"location":"how-to/servers.html#web-servers","text":"","title":"Web Servers"},{"location":"how-to/servers.html#database-servers","text":"","title":"Database Servers"},{"location":"how-to/servers.html#cache-servers","text":"","title":"Cache Servers"},{"location":"how-to/servers.html#doc-server","text":"For more about our only documenation server visit the MkDocs page.","title":"Doc Server"},{"location":"how-to/wp-cli.html","text":"Using WP CLI with WPLib Box \u00b6 While you certainly can install WP CLI on your host computer and use it with your WPLib Box project, hopefully you won't have to as we've implemented WP CLI within of WPLib Box . Bug Unfortunately WP CLI is broken in 0.17.0 due to our changing the project path in the VM but not changing in the WP CLI container. This should be fixed soon in 0.17.1 . Using WP-CLI \u00b6 WP-CLI is installed in the WPLib Box virtual machine so to use it you first SSH into WPLib Box and then run your WP CLI command, for example: vagrant ssh wp plugin list Implementation \u00b6 Our implementation of WP CLI follows WPLib Box's philosophy of containerization and is thus implemented with our own Docker container . Our wp command is itself is a Bash script which is designed to invoke the WP CLI container and that script can be found at /opt/box/bin/wp after you vagrant ssh into WPLib Box. Current Limitations \u00b6 The wp package subcommand is currently not supported. \u2014 This is due to the fact our WP CLI is packaged in a Docker container and currently our container does not support a method to add packages to the inside of a container. We do have plans to correct this , however. Other commands may also have issues. If you find this to be the case please contact our support to let us know so we can address sooner than later.","title":"WP CLI"},{"location":"how-to/wp-cli.html#using-wp-cli-with-wplib-box","text":"While you certainly can install WP CLI on your host computer and use it with your WPLib Box project, hopefully you won't have to as we've implemented WP CLI within of WPLib Box . Bug Unfortunately WP CLI is broken in 0.17.0 due to our changing the project path in the VM but not changing in the WP CLI container. This should be fixed soon in 0.17.1 .","title":"Using WP CLI with WPLib Box"},{"location":"how-to/wp-cli.html#using-wp-cli","text":"WP-CLI is installed in the WPLib Box virtual machine so to use it you first SSH into WPLib Box and then run your WP CLI command, for example: vagrant ssh wp plugin list","title":"Using WP-CLI"},{"location":"how-to/wp-cli.html#implementation","text":"Our implementation of WP CLI follows WPLib Box's philosophy of containerization and is thus implemented with our own Docker container . Our wp command is itself is a Bash script which is designed to invoke the WP CLI container and that script can be found at /opt/box/bin/wp after you vagrant ssh into WPLib Box.","title":"Implementation"},{"location":"how-to/wp-cli.html#current-limitations","text":"The wp package subcommand is currently not supported. \u2014 This is due to the fact our WP CLI is packaged in a Docker container and currently our container does not support a method to add packages to the inside of a container. We do have plans to correct this , however. Other commands may also have issues. If you find this to be the case please contact our support to let us know so we can address sooner than later.","title":"Current Limitations"},{"location":"how-to/setup/index.html","text":"NOT FINISHED \u00b6 Initial Setup for WPLib Box \u00b6 These seem to be the most common needs for new users when setting up WPLib Box: Organizing your Project Directories Configuring WPLib Box's Domain Name If you don't find what your use-case here be sure to check the How To page. Configuration Options \u00b6 WPLib Box can be configured by using terminal commands and by modifying config files . As of version 0.17.0 these are your configuration options (many more configuration options will be available in the future): The box command project.json","title":"Overview"},{"location":"how-to/setup/index.html#not-finished","text":"","title":"NOT FINISHED"},{"location":"how-to/setup/index.html#initial-setup-for-wplib-box","text":"These seem to be the most common needs for new users when setting up WPLib Box: Organizing your Project Directories Configuring WPLib Box's Domain Name If you don't find what your use-case here be sure to check the How To page.","title":"Initial Setup for WPLib Box"},{"location":"how-to/setup/index.html#configuration-options","text":"WPLib Box can be configured by using terminal commands and by modifying config files . As of version 0.17.0 these are your configuration options (many more configuration options will be available in the future): The box command project.json","title":"Configuration Options"},{"location":"how-to/setup/directories.html","text":"Organizing your Project Directories \u00b6","title":"Directories"},{"location":"how-to/setup/directories.html#organizing-your-project-directories","text":"","title":"Organizing your Project Directories"},{"location":"how-to/setup/hostname.html","text":"Configuring WPLib Box's Domain Name \u00b6 By default WPLib Box configures itself to load using the domain name wplib.box , assuming you allow it to update your hosts file . But this is probably not the domain you want to use to work on your client's website. Choosing a top-level domain for local use. \u00b6 In \"early days\" we local developers always used .dev for our local domains; e.g. example.dev . But thanks to Google that is not really a good option anymore, especially if you ever plan to use Chrome. So let's say your client's website is example.com ; we recommend you pick example.local (because we like it!) , or example.test since .test is the shortest available name where the rug is not likely to be pulled out from under us in the future. Changing the Domain Name \u00b6 Assuming you stored your project in a subdirectory named example.local of a Sites directory then to change WPLib Box's domain name is as simple as updating HOSTNAME in that project directory, and then running vagrant reload : MacOS or Linux cd ~/Sites/example.local echo example.local > HOSTNAME vagrant reload Windows cd C:\\Sites\\example.local echo example.local > HOSTNAME vagrant reload You can, of course, also load HOSTNAME into your IDE or text editor and change it that way too.","title":"Hostname"},{"location":"how-to/setup/hostname.html#configuring-wplib-boxs-domain-name","text":"By default WPLib Box configures itself to load using the domain name wplib.box , assuming you allow it to update your hosts file . But this is probably not the domain you want to use to work on your client's website.","title":"Configuring WPLib Box's Domain Name"},{"location":"how-to/setup/hostname.html#choosing-a-top-level-domain-for-local-use","text":"In \"early days\" we local developers always used .dev for our local domains; e.g. example.dev . But thanks to Google that is not really a good option anymore, especially if you ever plan to use Chrome. So let's say your client's website is example.com ; we recommend you pick example.local (because we like it!) , or example.test since .test is the shortest available name where the rug is not likely to be pulled out from under us in the future.","title":"Choosing a top-level domain for local use."},{"location":"how-to/setup/hostname.html#changing-the-domain-name","text":"Assuming you stored your project in a subdirectory named example.local of a Sites directory then to change WPLib Box's domain name is as simple as updating HOSTNAME in that project directory, and then running vagrant reload : MacOS or Linux cd ~/Sites/example.local echo example.local > HOSTNAME vagrant reload Windows cd C:\\Sites\\example.local echo example.local > HOSTNAME vagrant reload You can, of course, also load HOSTNAME into your IDE or text editor and change it that way too.","title":"Changing the Domain Name"},{"location":"how-to/tutorials/host-entries.html","text":"","title":"Host Entries"},{"location":"how-to/tutorials/secure-shell.html","text":"SSH - Secure Shell \u00b6 SSH stands for \" Secure Shell \" and is the standard means of managing a Linux-based computer that is not your host computer . Typically this means a remote computer, but as WPLib Box runs inside of your host computer then calling it a \"remote\" computer would be a misnomer, but the principle is the same. Said another way, SSHing into a computer is a way to gain access to running commands at a command line for that computer SSH in Modern Culture Secure Shell is all the rage for hacker movies and TV shows like Mr. Robot . SSHing into WPLib Box \u00b6 Depends on your host computer's operating system you access SSH slightly differently: On Windows open your command prompt , On MacOS open terminal , Or if Linux is your host computer, you know how to do this. Once you have access to a terminal prompt type the following commands: MacOS or Linux \u00b6 cd /path/to/your/project vagrant up vagrant ssh Windows \u00b6 cd c:\\path\\to\\your\\project vagrant up vagrant ssh Commands Explained \u00b6 In case you are new to terminal: cd changes what you host computer thinks is your current directory to that of your WordPress project's directory, The vagrant up command makes sure your WPLib Box virtual machine is running for your project, and The vagrant ssh command requests to enter your project's WPLib Box with a command prompt available. On Success: \u00b6 If you are successful, your screen should look like this:","title":"Secure Shell"},{"location":"how-to/tutorials/secure-shell.html#ssh-secure-shell","text":"SSH stands for \" Secure Shell \" and is the standard means of managing a Linux-based computer that is not your host computer . Typically this means a remote computer, but as WPLib Box runs inside of your host computer then calling it a \"remote\" computer would be a misnomer, but the principle is the same. Said another way, SSHing into a computer is a way to gain access to running commands at a command line for that computer SSH in Modern Culture Secure Shell is all the rage for hacker movies and TV shows like Mr. Robot .","title":"SSH - Secure Shell"},{"location":"how-to/tutorials/secure-shell.html#sshing-into-wplib-box","text":"Depends on your host computer's operating system you access SSH slightly differently: On Windows open your command prompt , On MacOS open terminal , Or if Linux is your host computer, you know how to do this. Once you have access to a terminal prompt type the following commands:","title":"SSHing into WPLib Box"},{"location":"how-to/tutorials/secure-shell.html#macos-or-linux","text":"cd /path/to/your/project vagrant up vagrant ssh","title":"MacOS or Linux"},{"location":"how-to/tutorials/secure-shell.html#windows","text":"cd c:\\path\\to\\your\\project vagrant up vagrant ssh","title":"Windows"},{"location":"how-to/tutorials/secure-shell.html#commands-explained","text":"In case you are new to terminal: cd changes what you host computer thinks is your current directory to that of your WordPress project's directory, The vagrant up command makes sure your WPLib Box virtual machine is running for your project, and The vagrant ssh command requests to enter your project's WPLib Box with a command prompt available.","title":"Commands Explained"},{"location":"how-to/tutorials/secure-shell.html#on-success","text":"If you are successful, your screen should look like this:","title":"On Success:"},{"location":"how-to/tutorials/terminal.html","text":"Opening a Terminal/Command Line Prompt \u00b6 To use WPlib Box you'll need to use the terminal a.k.a. command line. This is really not as scary as it sounds. We have made everything you need to do relatively simple. To open terminal/command line prompt: On MacOS click here to open a terminal, On Windows click here to open your command prompt, Or if Linux is your host computer, you know how to do this.","title":"Terminal"},{"location":"how-to/tutorials/terminal.html#opening-a-terminalcommand-line-prompt","text":"To use WPlib Box you'll need to use the terminal a.k.a. command line. This is really not as scary as it sounds. We have made everything you need to do relatively simple. To open terminal/command line prompt: On MacOS click here to open a terminal, On Windows click here to open your command prompt, Or if Linux is your host computer, you know how to do this.","title":"Opening a Terminal/Command Line Prompt"},{"location":"quick-start/index.html","text":"WPLib Box Quick Start \u00b6 The following looks a lot more complicated that it is. It is just that we wrote details instructions in hopes to allow you to breeze through. 1. Download the latest WPLib Box. 2. Download and install VirtualBox and then Vagrant (in the near future WPLib Box will not require Vagrant.) 3. Unzip WPLib Box into a new project directory; use ~/Sites/example.local or C:\\Sites\\example.local for this quick start. 4. Open a terminal/command prompt (in the near future WPLib Box will have an installer and a GUI to make using the command line optional!) 5. Change to your project directory, i.e. if your sites are in a Sites directory off your root: MacOS or Linux cd ~/Sites/example.local Windows cd C:\\Sites\\example.local 6. Open project.json in your text editor and change the line: \"hostname\": \"box.local\", To: \"hostname\": \"example.local\", 7. Type the following command: vagrant up Normally vagrant up takes about five ( 5 ) minutes to download. Of course duration depends on your download speeds. After that, boot up usually takes less than one ( 1 ) minute. 8. When prompted enter your password for your Mac, Windows or Linux host computer . Or you can skip this step and manually add entries for example.local to /etc/hosts or C:\\Windows\\System32\\drivers\\etc\\hosts . You should find the IP address you will need to add to your hosts file in the IP file of your project' directory. 9. Now visit http://example.local in your browser (The very first page load usually takes about 5-10 seconds, but after that they should be lightning quick.) 10. And that's it, you are now experiencing WPLib Box! :-) P.S. Don't forget to Join our Slack to ask any questions you may have.","title":"Getting Started"},{"location":"quick-start/index.html#wplib-box-quick-start","text":"The following looks a lot more complicated that it is. It is just that we wrote details instructions in hopes to allow you to breeze through. 1. Download the latest WPLib Box. 2. Download and install VirtualBox and then Vagrant (in the near future WPLib Box will not require Vagrant.) 3. Unzip WPLib Box into a new project directory; use ~/Sites/example.local or C:\\Sites\\example.local for this quick start. 4. Open a terminal/command prompt (in the near future WPLib Box will have an installer and a GUI to make using the command line optional!) 5. Change to your project directory, i.e. if your sites are in a Sites directory off your root: MacOS or Linux cd ~/Sites/example.local Windows cd C:\\Sites\\example.local 6. Open project.json in your text editor and change the line: \"hostname\": \"box.local\", To: \"hostname\": \"example.local\", 7. Type the following command: vagrant up Normally vagrant up takes about five ( 5 ) minutes to download. Of course duration depends on your download speeds. After that, boot up usually takes less than one ( 1 ) minute. 8. When prompted enter your password for your Mac, Windows or Linux host computer . Or you can skip this step and manually add entries for example.local to /etc/hosts or C:\\Windows\\System32\\drivers\\etc\\hosts . You should find the IP address you will need to add to your hosts file in the IP file of your project' directory. 9. Now visit http://example.local in your browser (The very first page load usually takes about 5-10 seconds, but after that they should be lightning quick.) 10. And that's it, you are now experiencing WPLib Box! :-) P.S. Don't forget to Join our Slack to ask any questions you may have.","title":"WPLib Box Quick Start"}]}